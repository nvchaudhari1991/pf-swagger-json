basePath: /pf-admin-api/v1
definitions:
  AccessTokenManagerMapping:
    description: A mapping in a connection that defines how access tokens are created.
    properties:
      accessTokenManagerRef:
        $ref: '#/definitions/ResourceLink'
        description: The access token manager used in OAuth attribute mapping.
      attributeContractFulfillment:
        additionalProperties:
          $ref: '#/definitions/AttributeFulfillmentValue'
        description: A list of mappings from attribute names to their fulfillment values.
      attributeSources:
        description: A list of configured data stores to look up attributes from.
        items:
          $ref: '#/definitions/AttributeSource'
        type: array
      issuanceCriteria:
        $ref: '#/definitions/IssuanceCriteria'
        description: >-
          The issuance criteria that this transaction must meet before the
          corresponding attribute contract is fulfilled.
    required:
      - attributeContractFulfillment
  AccountManagementSettings:
    description: Account management settings.
    properties:
      accountStatusAlgorithm:
        $ref: '#/definitions/SaasAccountStatusAlgorithm'
        description: >-
          The account status algorithm name. 

          ACCOUNT_STATUS_ALGORITHM_AD -  Algorithm name for Active Directory,
          which uses a bitmap for each user entry. 

          ACCOUNT_STATUS_ALGORITHM_FLAG - Algorithm name for Oracle Directory
          Server and other LDAP directories that use a separate attribute to
          store the user's status. When this option is selected, the Flag
          Comparison Value and Flag Comparison Status fields should be used.
        enum:
          - ACCOUNT_STATUS_ALGORITHM_AD
          - ACCOUNT_STATUS_ALGORITHM_FLAG
      accountStatusAttributeName:
        description: The account status attribute name.
        type: string
      defaultStatus:
        description: The default status of the account.
        type: boolean
      flagComparisonStatus:
        description: The flag that represents comparison status.
        type: boolean
      flagComparisonValue:
        description: The flag that represents comparison value.
        type: string
    required:
      - accountStatusAttributeName
      - accountStatusAlgorithm
  AdditionalAllowedEntitiesConfiguration:
    description: >-
      Additional allowed entities or issuers configuration. Currently only used
      in OIDC IdP (RP) connection.
    properties:
      additionalAllowedEntities:
        description: >-
          An array of additional allowed entities or issuers to be accepted
          during entity or issuer validation.
        items:
          $ref: '#/definitions/Entity'
        type: array
      allowAdditionalEntities:
        description: >-
          Set to true to configure additional entities or issuers to be accepted
          during entity or issuer validation.
        type: boolean
      allowAllEntities:
        description: >-
          Set to true to accept any entity or issuer during entity or issuer
          validation. (Not Recommended)
        type: boolean
  ApiResult:
    description: Details on the result of the operation.
    properties:
      developerMessage:
        description: 'Developer-oriented error message, if available.'
        type: string
      message:
        description: Success or error message.
        type: string
      resultId:
        description: Result identifier.
        type: string
      validationErrors:
        description: 'List of validation errors, if any.'
        items:
          $ref: '#/definitions/ValidationError'
        type: array
  ArtifactResolverLocation:
    description: The remote party URLs to resolve the artifact.
    properties:
      index:
        description: The priority of the endpoint.
        format: int32
        type: integer
      url:
        description: >-
          Remote party URLs that you will use to resolve/translate the artifact
          and get the actual protocol message
        type: string
    required:
      - index
      - url
  ArtifactSettings:
    description: The settings for an Artifact binding.
    properties:
      lifetime:
        description: The lifetime of the artifact in seconds.
        format: int32
        type: integer
      resolverLocations:
        description: >-
          Remote party URLs that you will use to resolve/translate the artifact
          and get the actual protocol message
        items:
          $ref: '#/definitions/ArtifactResolverLocation'
        type: array
      sourceId:
        description: Source ID for SAML1.x connections
        type: string
    required:
      - lifetime
      - resolverLocations
  AssertionLifetime:
    description: The timeframe of validity before and after the issuance of the assertion.
    properties:
      minutesAfter:
        description: Assertion validity in minutes after the assertion issuance.
        format: int32
        type: integer
      minutesBefore:
        description: Assertion validity in minutes before the assertion issuance.
        format: int32
        type: integer
    required:
      - minutesBefore
      - minutesAfter
  AttributeFulfillmentValue:
    description: Defines how an attribute in an attribute contract should be populated.
    properties:
      source:
        $ref: '#/definitions/SourceTypeIdKey'
        description: The attribute value source.
      value:
        description: The value for this attribute.
        type: string
    required:
      - source
      - value
  AttributeQueryNameMapping:
    description: The attribute query name mappings between the SP and the IdP.
    properties:
      localName:
        description: The local attribute name.
        type: string
      remoteName:
        description: The remote attribute name as defined by the attribute authority.
        type: string
    required:
      - localName
      - remoteName
  AttributeSource:
    description: >-
      The configured settings to look up attributes from an associated data
      store.
    discriminator: type
    properties:
      attributeContractFulfillment:
        additionalProperties:
          $ref: '#/definitions/AttributeFulfillmentValue'
        description: >-
          A list of mappings from attribute names to their fulfillment values.
          This field is only valid for the SP Connection's Browser SSO mappings
      dataStoreRef:
        $ref: '#/definitions/ResourceLink'
        description: Reference to the associated data store.
      description:
        description: >-
          The description of this attribute source. The description needs to be
          unique amongst the attribute sources for the mapping.<br>Note:
          Required for APC-to-SP Adapter Mappings
        type: string
      id:
        description: >-
          The ID that defines this attribute source. Only alphanumeric
          characters allowed.<br>Note: Required for OpenID Connect policy
          attribute sources, OAuth IdP adapter mappings, OAuth access token
          mappings and APC-to-SP Adapter Mappings. IdP Connections will ignore
          this property since it only allows one attribute source to be defined
          per mapping. IdP-to-SP Adapter Mappings can contain multiple attribute
          sources.
        type: string
      type:
        $ref: '#/definitions/DataStoreType'
        description: The data store type of this attribute source.
        enum:
          - LDAP
          - JDBC
          - CUSTOM
    required:
      - type
      - dataStoreRef
  AuthenticationPolicyContractAssertionMapping:
    description: The Authentication Policy Contract Assertion Mapping.
    properties:
      abortSsoTransactionAsFailSafe:
        description: >-
          If set to true, SSO transaction will be aborted as a fail-safe when
          the data-store's attribute mappings fail to complete the attribute
          contract. Otherwise, the attribute contract with default values is
          used. By default, this value is false.
        type: boolean
      attributeContractFulfillment:
        additionalProperties:
          $ref: '#/definitions/AttributeFulfillmentValue'
        description: A list of mappings from attribute names to their fulfillment values.
      attributeSources:
        description: A list of configured data stores to look up attributes from.
        items:
          $ref: '#/definitions/AttributeSource'
        type: array
      authenticationPolicyContractRef:
        $ref: '#/definitions/ResourceLink'
        description: Reference to the associated Authentication Policy Contract.
      issuanceCriteria:
        $ref: '#/definitions/IssuanceCriteria'
        description: >-
          The issuance criteria that this transaction must meet before the
          corresponding attribute contract is fulfilled.
      restrictVirtualEntityIds:
        description: Restricts this mapping to specific virtual entity IDs.
        type: boolean
      restrictedVirtualEntityIds:
        description: The list of virtual server IDs that this mapping is restricted to.
        items:
          type: string
        type: array
    required:
      - authenticationPolicyContractRef
      - attributeContractFulfillment
  AuthenticationPolicyContractMapping:
    description: An Authentication Policy Contract mapping into IdP Connection.
    properties:
      attributeContractFulfillment:
        additionalProperties:
          $ref: '#/definitions/AttributeFulfillmentValue'
        description: A list of mappings from attribute names to their fulfillment values.
      attributeSources:
        description: A list of configured data stores to look up attributes from.
        items:
          $ref: '#/definitions/AttributeSource'
        type: array
      authenticationPolicyContractRef:
        $ref: '#/definitions/ResourceLink'
        description: Reference to the associated Authentication Policy Contract.
      issuanceCriteria:
        $ref: '#/definitions/IssuanceCriteria'
        description: >-
          The issuance criteria that this transaction must meet before the
          corresponding attribute contract is fulfilled.
      restrictVirtualServerIds:
        description: Restricts this mapping to specific virtual entity IDs.
        type: boolean
      restrictedVirtualServerIds:
        description: The list of virtual server IDs that this mapping is restricted to.
        items:
          type: string
        type: array
    required:
      - authenticationPolicyContractRef
      - attributeContractFulfillment
  AuthnContextMapping:
    description: The authentication context mapping between local and remote values.
    properties:
      local:
        description: The local authentication context value.
        type: string
      remote:
        description: The remote authentication context value.
        type: string
  BackChannelAuth:
    description: >-
      The SOAP authentication methods when sending or receiving a message using
      SOAP back channel.
    discriminator: type
    properties:
      digitalSignature:
        description: If incoming or outgoing messages must be signed.
        type: boolean
      httpBasicCredentials:
        $ref: '#/definitions/UsernamePasswordCredentials'
        description: The credentials to use when you authenticate with the SOAP endpoint.
      type:
        $ref: '#/definitions/BackChannelAuthType'
        description: The back channel authentication type.
        enum:
          - INBOUND
          - OUTBOUND
    required:
      - type
  BinaryLdapAttributeSettings:
    description: Binary settings for a LDAP attribute.
    properties:
      binaryEncoding:
        $ref: '#/definitions/LdapAttrEncodingType'
        description: >-
          Get the encoding type for this attribute. If not specified, the
          default is BASE64.
        enum:
          - BASE64
          - HEX
          - SID
  CertView:
    description: Certificate details.
    properties:
      cryptoProvider:
        $ref: '#/definitions/CryptoProvider'
        description: >-
          Cryptographic Provider. This is only applicable if Hybrid HSM mode is
          true.
        enum:
          - LOCAL
          - HSM
      expires:
        description: >-
          The end date up until which the item is valid, in ISO 8601 format
          (UTC).
        format: date-time
        type: string
      id:
        description: 'The persistent, unique ID for the certificate.'
        type: string
      issuerDN:
        description: The issuer's distinguished name.
        type: string
      keyAlgorithm:
        description: The public key algorithm.
        type: string
      keySize:
        description: The public key size.
        format: int32
        type: integer
      serialNumber:
        description: The serial number assigned by the CA.
        type: string
      sha1Fingerprint:
        description: SHA-1 fingerprint in Hex encoding.
        type: string
      sha256Fingerprint:
        description: SHA-256 fingerprint in Hex encoding.
        type: string
      signatureAlgorithm:
        description: The signature algorithm.
        type: string
      status:
        $ref: '#/definitions/CertificateValidity'
        description: Status of the item.
        enum:
          - VALID
          - EXPIRED
          - NOT_YET_VALID
          - REVOKED
      subjectAlternativeNames:
        description: The subject alternative names (SAN).
        items:
          type: string
        type: array
      subjectDN:
        description: The subject's distinguished name.
        type: string
      validFrom:
        description: 'The start date from which the item is valid, in ISO 8601 format (UTC).'
        format: date-time
        type: string
      version:
        description: The X.509 version to which the item conforms.
        format: int32
        type: integer
  ChangeDetectionSettings:
    description: Setting to detect changes to a user or a group.
    properties:
      changedUsersAlgorithm:
        $ref: '#/definitions/SaasChangedUsersAlgorithm'
        description: >-
          The changed user algorithm. 

          ACTIVE_DIRECTORY_USN - For Active Directory only, this algorithm
          queries for update sequence numbers on user records that are larger
          than the last time records were checked. 

          TIMESTAMP - Queries for timestamps on user records that are not older
          than the last time records were checked. This check is more efficient
          from the point of view of the PingFederate provisioner but can be more
          time consuming on the LDAP side, particularly with the Oracle
          Directory Server. 

          TIMESTAMP_NO_NEGATION - Queries for timestamps on user records that
          are newer than the last time records were checked. This algorithm is
          recommended for the Oracle Directory Server.
        enum:
          - ACTIVE_DIRECTORY_USN
          - TIMESTAMP
          - TIMESTAMP_NO_NEGATION
      groupObjectClass:
        description: The group object class.
        type: string
      timeStampAttributeName:
        description: The timestamp attribute name.
        type: string
      userObjectClass:
        description: The user object class.
        type: string
      usnAttributeName:
        description: The USN attribute name.
        type: string
    required:
      - userObjectClass
      - groupObjectClass
      - changedUsersAlgorithm
      - timeStampAttributeName
  Channel:
    description: >-
      A channel is a combination of a source data store and a provisioning
      target. It include settings of a source data store, managing provisioning
      threads and mapping of attributes.
    properties:
      active:
        description: >-
          Indicates whether the channel is the active channel for this
          connection.
        type: boolean
      attributeMapping:
        description: >-
          The mapping of attributes from the local data store into Fields
          specified by the service provider.
        items:
          $ref: '#/definitions/SaasAttributeMapping'
        type: array
      channelSource:
        $ref: '#/definitions/ChannelSource'
        description: The LDAP settings that apply to the source user-data store.
      maxThreads:
        description: The number of processing threads. The default value is 1.
        format: int32
        type: integer
      name:
        description: The name of the channel.
        type: string
      timeout:
        description: >-
          Timeout is the number of seconds that can be adjusted if more time is
          needed for provisioning a large amount of data. It is applicable when
          the number of processing thread is more than 1. The default value is
          60.
        format: int32
        type: integer
    required:
      - active
      - channelSource
      - attributeMapping
      - name
      - maxThreads
      - timeout
  ChannelSource:
    description: The source data source and LDAP settings.
    properties:
      accountManagementSettings:
        $ref: '#/definitions/AccountManagementSettings'
        description: Account management settings that includes the status and algorithms.
      baseDn:
        description: The base DN where the user records are located.
        type: string
      changeDetectionSettings:
        $ref: '#/definitions/ChangeDetectionSettings'
        description: Settings to detect a during provisioning.
      dataSource:
        $ref: '#/definitions/ResourceLink'
        description: Reference to an LDAP datastore.
      groupMembershipDetection:
        $ref: '#/definitions/GroupMembershipDetection'
        description: Settings to detect group memberships.
      groupSourceLocation:
        $ref: '#/definitions/ChannelSourceLocation'
        description: The group provisioning source location settings.
      guidAttributeName:
        description: the GUID attribute name.
        type: string
      guidBinary:
        description: Indicates whether the GUID is stored in binary format.
        type: boolean
      userSourceLocation:
        $ref: '#/definitions/ChannelSourceLocation'
        description: The user provisioning source location settings.
    required:
      - dataSource
      - guidAttributeName
      - guidBinary
      - changeDetectionSettings
      - groupMembershipDetection
      - accountManagementSettings
      - baseDn
      - userSourceLocation
  ChannelSourceLocation:
    description: The location settings that includes a DN and a LDAP filter.
    properties:
      filter:
        description: An LDAP filter.
        type: string
      groupDN:
        description: The group DN for users or groups.
        type: string
      nestedSearch:
        description: Indicates whether the search is nested.
        type: boolean
  ConditionalIssuanceCriteriaEntry:
    description: >-
      An issuance criterion that checks a source attribute against a particular
      condition and the expected value. If the condition is true then this
      issuance criterion passes, otherwise the criterion fails.
    properties:
      attributeName:
        description: The name of the attribute to use in this issuance criterion.
        type: string
      condition:
        $ref: '#/definitions/ConditionType'
        description: >-
          The condition that will be applied to the source attribute's value and
          the expected value.
        enum:
          - EQUALS
          - EQUALS_CASE_INSENSITIVE
          - EQUALS_DN
          - NOT_EQUAL
          - NOT_EQUAL_CASE_INSENSITIVE
          - NOT_EQUAL_DN
          - MULTIVALUE_CONTAINS
          - MULTIVALUE_CONTAINS_CASE_INSENSITIVE
          - MULTIVALUE_CONTAINS_DN
          - MULTIVALUE_DOES_NOT_CONTAIN
          - MULTIVALUE_DOES_NOT_CONTAIN_CASE_INSENSITIVE
          - MULTIVALUE_DOES_NOT_CONTAIN_DN
      errorResult:
        description: >-
          The error result to return if this issuance criterion fails. This
          error result will show up in the PingFederate server logs.
        type: string
      source:
        $ref: '#/definitions/SourceTypeIdKey'
        description: The source of the attribute.
      value:
        description: The expected value of this issuance criterion.
        type: string
    required:
      - source
      - attributeName
      - condition
      - value
  ConfigField:
    description: A plugin configuration field value.
    properties:
      encryptedValue:
        description: >-
          For encrypted or hashed fields, this attribute contains the encrypted
          representation of the field's value, if a value is defined. If you do
          not want to update the stored value, this attribute should be passed
          back unchanged.
        type: string
      inherited:
        description: >-
          Whether this field is inherited from its parent instance. If true, the
          value/encrypted value properties become read-only. The default value
          is false.
        type: boolean
      name:
        description: The name of the configuration field.
        type: string
      value:
        description: >-
          The value for the configuration field. For encrypted or hashed fields,
          GETs will not return this attribute. To update an encrypted or hashed
          field, specify the new value in this attribute.
        type: string
    required:
      - name
  ConfigRow:
    description: A row of configuration values for a plugin configuration table.
    properties:
      defaultRow:
        description: Whether this row is the default.
        type: boolean
      fields:
        description: The configuration fields in the row.
        items:
          $ref: '#/definitions/ConfigField'
        type: array
    required:
      - fields
  ConfigTable:
    description: A plugin configuration table populated with values.
    properties:
      inherited:
        description: >-
          Whether this table is inherited from its parent instance. If true, the
          rows become read-only. The default value is false.
        type: boolean
      name:
        description: The name of the table.
        type: string
      rows:
        description: List of table rows.
        items:
          $ref: '#/definitions/ConfigRow'
        type: array
    required:
      - name
  Connection:
    description: Settings shared by SP-side and IdP-side connections.
    discriminator: type
    properties:
      active:
        description: >-
          Specifies whether the connection is active and ready to process
          incoming requests. The default value is false.
        type: boolean
      additionalAllowedEntitiesConfiguration:
        $ref: '#/definitions/AdditionalAllowedEntitiesConfiguration'
        description: >-
          Additional allowed entities or issuers configuration. Currently only
          used in OIDC IdP (RP) connection.
      baseUrl:
        description: >-
          The fully-qualified hostname and port on which your partner's
          federation deployment runs.
        type: string
      contactInfo:
        $ref: '#/definitions/ContactInfo'
        description: The contact information for this partner.
      credentials:
        $ref: '#/definitions/ConnectionCredentials'
        description: >-
          The certificates and settings for encryption, signing, and signature
          verification. It is required for  SAMLx.x and WS-Fed Connections.
      defaultVirtualEntityId:
        description: >-
          The default alternate entity ID that identifies the local server to
          this partner. It is required when virtualEntityIds is not empty and
          must be included in that list.
        type: string
      entityId:
        description: >-
          The partner's entity ID (connection ID) or issuer value (for OIDC
          Connections).
        type: string
      extendedProperties:
        additionalProperties:
          $ref: '#/definitions/ParameterValues'
        description: >-
          Extended Properties allows to store additional information for IdP/SP
          Connections. The names of these extended properties should be defined
          in /extendedProperties.
      id:
        description: >-
          The persistent, unique ID for the connection. It can be any
          combination of [a-zA-Z0-9._-]. This property is system-assigned if not
          specified.
        type: string
      licenseConnectionGroup:
        description: >-
          The license connection group. If your PingFederate license is based on
          connection groups, each connection must be assigned to a group before
          it can be used.
        type: string
      loggingMode:
        $ref: '#/definitions/LoggingMode'
        description: >-
          The level of transaction logging applicable for this connection.
          Default is STANDARD.
        enum:
          - NONE
          - STANDARD
          - FULL
          - ENHANCED
      metadataReloadSettings:
        $ref: '#/definitions/ConnectionMetadataUrl'
        description: Connection metadata automatic reload settings.
      name:
        description: The connection name.
        type: string
      type:
        $ref: '#/definitions/ConnectionType'
        description: The type of this connection. Default is 'IDP'.
        enum:
          - IDP
          - SP
      virtualEntityIds:
        description: >-
          List of alternate entity IDs that identifies the local server to this
          partner.
        items:
          type: string
        type: array
    required:
      - entityId
      - name
  ConnectionCert:
    description: A certificate used for signature verification or XML encryption.
    properties:
      activeVerificationCert:
        description: >-
          Indicates whether this is an active signature verification
          certificate.
        type: boolean
      certView:
        $ref: '#/definitions/CertView'
        description: >-
          Certificate details. This property is read-only and is always ignored
          on a POST or PUT.
      encryptionCert:
        description: >-
          Indicates whether to use this cert to encrypt outgoing assertions.
          Only one certificate in the collection can have this flag set.
        type: boolean
      primaryVerificationCert:
        description: >-
          Indicates whether this is the primary signature verification
          certificate. Only one certificate in the collection can have this flag
          set.
        type: boolean
      secondaryVerificationCert:
        description: >-
          Indicates whether this is the secondary signature verification
          certificate. Only one certificate in the collection can have this flag
          set.
        type: boolean
      x509File:
        $ref: '#/definitions/X509File'
        description: >-
          The certificate data. This property must always be supplied on a POST
          or PUT.
    required:
      - x509File
  ConnectionCerts:
    description: The certificates used for signature verification and XML encryption.
    properties:
      items:
        description: The actual list of certificates.
        items:
          $ref: '#/definitions/ConnectionCert'
        type: array
  ConnectionCredentials:
    description: >-
      The certificates and settings for encryption, signing, and signature
      verification.
    properties:
      blockEncryptionAlgorithm:
        description: >-
          The algorithm used to encrypt assertions sent to this partner.
          AES_128, AES_256 and Triple_DES are also supported. Default is AES_128
        type: string
      certs:
        description: The certificates used for signature verification and XML encryption.
        items:
          $ref: '#/definitions/ConnectionCert'
        type: array
      decryptionKeyPairRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          The ID of the primary key pair used to decrypt message content
          received from this partner. The ID of the key pair is also known as
          the alias and can be found by viewing the corresponding certificate
          under 'Signing & Decryption Keys & Certificates' in the PingFederate
          Administrative Console.
      inboundBackChannelAuth:
        $ref: '#/definitions/InboundBackChannelAuth'
        description: >-
          The SOAP authentication method(s) to use when you receive a message
          using SOAP back channel.
      keyTransportAlgorithm:
        description: >-
          The algorithm used to transport keys to this partner. RSA_OAEP and
          RSA_v15 are supported. Default is RSA_OAEP
        type: string
      outboundBackChannelAuth:
        $ref: '#/definitions/OutboundBackChannelAuth'
        description: >-
          The SOAP authentication method(s) to use when you send a message using
          SOAP back channel.
      secondaryDecryptionKeyPairRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          The ID of the secondary key pair used to decrypt message content
          received from this partner.
      signingSettings:
        $ref: '#/definitions/SigningSettings'
        description: >-
          Settings related to the manner in which messages sent to the partner
          are digitally signed. Required for SP Connections.
      verificationIssuerDN:
        description: >-
          If a verification Subject DN is provided, you can optionally restrict
          the issuer to a specific trusted CA by specifying its DN in this
          field.
        type: string
      verificationSubjectDN:
        description: >-
          If this property is set, the verification trust model is Anchored. The
          verification certificate must be signed by a trusted CA and included
          in the incoming message, and the subject DN of the expected
          certificate is specified in this property. If this property is not
          set, then a primary verification certificate must be specified in the
          certs array.
        type: string
  ConnectionMetadataUrl:
    description: Configuration settings to enable automatic reload of partner's metadata.
    properties:
      enableAutoMetadataUpdate:
        description: >-
          Specifies whether the metadata of the connection will be automatically
          reloaded. The default value is true.
        type: boolean
      metadataUrlRef:
        $ref: '#/definitions/ResourceLink'
        description: ID of the saved Metadata URL.
    required:
      - metadataUrlRef
  ContactInfo:
    description: Contact information.
    properties:
      company:
        description: Company name.
        type: string
      email:
        description: Contact email address.
        type: string
      firstName:
        description: Contact first name.
        type: string
      lastName:
        description: Contact last name.
        type: string
      phone:
        description: Contact phone number.
        type: string
  CustomAttributeSource:
    allOf:
      - description: >-
          The configured settings used to look up attributes from a custom data
          store.
        properties:
          attributeContractFulfillment:
            additionalProperties:
              $ref: '#/definitions/AttributeFulfillmentValue'
            description: >-
              A list of mappings from attribute names to their fulfillment
              values. This field is only valid for the SP Connection's Browser
              SSO mappings
          dataStoreRef:
            $ref: '#/definitions/ResourceLink'
            description: Reference to the associated data store.
          description:
            description: >-
              The description of this attribute source. The description needs to
              be unique amongst the attribute sources for the mapping.<br>Note:
              Required for APC-to-SP Adapter Mappings
            type: string
          filterFields:
            description: >-
              The list of fields that can be used to filter a request to the
              custom data store.
            items:
              $ref: '#/definitions/FieldEntry'
            type: array
          id:
            description: >-
              The ID that defines this attribute source. Only alphanumeric
              characters allowed.<br>Note: Required for OpenID Connect policy
              attribute sources, OAuth IdP adapter mappings, OAuth access token
              mappings and APC-to-SP Adapter Mappings. IdP Connections will
              ignore this property since it only allows one attribute source to
              be defined per mapping. IdP-to-SP Adapter Mappings can contain
              multiple attribute sources.
            type: string
          type:
            $ref: '#/definitions/DataStoreType'
            description: The data store type of this attribute source.
            enum:
              - LDAP
              - JDBC
              - CUSTOM
        required:
          - type
          - dataStoreRef
      - $ref: '#/definitions/AttributeSource'
  DecryptionKeys:
    description: Decryption keys used to decrypt message content received from the partner.
    properties:
      primaryKeyRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          The ID of the primary decryption key pair. It is also known as the
          alias and can be found by viewing the corresponding certificate under
          'Signing & Decryption Keys & Certificates' in the PingFederate
          Administrative Console.
      secondaryKeyPairRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          The ID of the secondary key pair used to decrypt message content
          received from the partner.
  DecryptionPolicy:
    description: Defines what to decrypt in the browser-based SSO profile.
    properties:
      assertionEncrypted:
        description: >-
          Specify whether the incoming SAML assertion is encrypted for an IdP
          connection.
        type: boolean
      attributesEncrypted:
        description: >-
          Specify whether one or more incoming SAML attributes are encrypted for
          an IdP connection.
        type: boolean
      sloEncryptSubjectNameID:
        description: Encrypt the Subject Name ID in SLO messages to the IdP.
        type: boolean
      sloSubjectNameIDEncrypted:
        description: Allow encrypted Subject Name ID in SLO messages from the IdP.
        type: boolean
      subjectNameIdEncrypted:
        description: >-
          Specify whether the incoming Subject Name ID is encrypted for an IdP
          connection.
        type: boolean
  EncryptionPolicy:
    description: Defines what to encrypt in the browser-based SSO profile.
    properties:
      encryptAssertion:
        description: Whether the outgoing SAML assertion will be encrypted.
        type: boolean
      encryptSloSubjectNameId:
        description: >-
          Encrypt the name-identifier attribute in outbound SLO messages.  This
          can be set if the name id is encrypted.
        type: boolean
      encryptedAttributes:
        description: >-
          The list of outgoing SAML assertion attributes that will be encrypted.
          The 'encryptAssertion' property takes precedence over this.
        items:
          type: string
        type: array
      sloSubjectNameIDEncrypted:
        description: >-
          Allow the encryption of the name-identifier attribute for inbound SLO
          messages. This can be set if SP initiated SLO is enabled.
        type: boolean
  Entity:
    properties:
      entityDescription:
        description: Entity description.
        type: string
      entityId:
        description: Unique entity identifier.
        type: string
  ExpressionIssuanceCriteriaEntry:
    description: >-
      An issuance criterion that uses a Boolean return value from an OGNL
      expression to determine whether or not it passes.
    properties:
      errorResult:
        description: >-
          The error result to return if this issuance criterion fails. This
          error result will show up in the PingFederate server logs.
        type: string
      expression:
        description: The OGNL expression to evaluate.
        type: string
    required:
      - expression
  FieldEntry:
    description: A simple name value pair to represent a field entry.
    properties:
      name:
        description: The name of this field.
        type: string
      value:
        description: >-
          The value of this field. Whether or not the value is required will be
          determined by plugin validation checks.
        type: string
    required:
      - name
  GroupMembershipDetection:
    description: Settings to detect group memberships.
    properties:
      groupMemberAttributeName:
        description: >-
          The name of the attribute that represents group members in a group,
          also known as group member attribute.
        type: string
      memberOfGroupAttributeName:
        description: >-
          The name of the attribute that indicates the entity is a member of a
          group, also known as member of attribute.
        type: string
    required:
      - groupMemberAttributeName
  IdpAdapter:
    description: An IdP adapter instance.
    properties:
      attributeContract:
        $ref: '#/definitions/IdpAdapterAttributeContract'
        description: The list of attributes that the IdP adapter provides.
      attributeMapping:
        $ref: '#/definitions/IdpAdapterContractMapping'
        description: The attributes mapping from attribute sources to attribute targets.
      authnCtxClassRef:
        description: The fixed value that indicates how the user was authenticated.
        type: string
      configuration:
        $ref: '#/definitions/PluginConfiguration'
        description: Plugin instance configuration.
      id:
        description: >-
          The ID of the plugin instance. The ID cannot be modified once the
          instance is created.<br>Note: Ignored when specifying a connection's
          adapter override.
        type: string
      name:
        description: >-
          The plugin instance name. The name cannot be modified once the
          instance is created.<br>Note: Ignored when specifying a connection's
          adapter override.
        type: string
      parentRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          The reference to this plugin's parent instance. The parent reference
          is only accepted if the plugin type supports parent
          instances.<br>Note: This parent reference is required if this plugin
          instance is used as an overriding plugin (e.g. connection adapter
          overrides)
      pluginDescriptorRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          Reference to the plugin descriptor for this instance. The plugin
          descriptor cannot be modified once the instance is created.<br>Note:
          Ignored when specifying a connection's adapter override.
    required:
      - id
      - name
      - pluginDescriptorRef
      - configuration
  IdpAdapterAssertionMapping:
    description: The IdP Adapter Assertion Mapping.
    properties:
      abortSsoTransactionAsFailSafe:
        description: >-
          If set to true, SSO transaction will be aborted as a fail-safe when
          the data-store's attribute mappings fail to complete the attribute
          contract. Otherwise, the attribute contract with default values is
          used. By default, this value is false.
        type: boolean
      adapterOverrideSettings:
        $ref: '#/definitions/IdpAdapter'
        description: >-
          Connection specific configuration overrides for the mapped adapter
          instance.
      attributeContractFulfillment:
        additionalProperties:
          $ref: '#/definitions/AttributeFulfillmentValue'
        description: A list of mappings from attribute names to their fulfillment values.
      attributeSources:
        description: A list of configured data stores to look up attributes from.
        items:
          $ref: '#/definitions/AttributeSource'
        type: array
      idpAdapterRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          Reference to the associated IdP adapter.<br>Note: This is ignored if
          adapter overrides for this mapping exists. In this case, the
          override's parent adapter reference is used.
      issuanceCriteria:
        $ref: '#/definitions/IssuanceCriteria'
        description: >-
          The issuance criteria that this transaction must meet before the
          corresponding attribute contract is fulfilled.
      restrictVirtualEntityIds:
        description: Restricts this mapping to specific virtual entity IDs.
        type: boolean
      restrictedVirtualEntityIds:
        description: The list of virtual server IDs that this mapping is restricted to.
        items:
          type: string
        type: array
    required:
      - idpAdapterRef
      - attributeContractFulfillment
  IdpAdapterAttribute:
    description: An attribute for the IdP adapter attribute contract.
    properties:
      masked:
        description: >-
          Specifies whether this attribute is masked in PingFederate logs.
          Defaults to false.
        type: boolean
      name:
        description: The name of this attribute.
        type: string
      pseudonym:
        description: >-
          Specifies whether this attribute is used to construct a pseudonym for
          the SP. Defaults to false.
        type: boolean
    required:
      - name
  IdpAdapterAttributeContract:
    description: A set of attributes exposed by an IdP adapter.
    properties:
      coreAttributes:
        description: >-
          A list of IdP adapter attributes that correspond to the attributes
          exposed by the IdP adapter type.
        items:
          $ref: '#/definitions/IdpAdapterAttribute'
        type: array
      extendedAttributes:
        description: >-
          A list of additional attributes that can be returned by the IdP
          adapter. The extended attributes are only used if the adapter supports
          them.
        items:
          $ref: '#/definitions/IdpAdapterAttribute'
        type: array
      inherited:
        description: >-
          Whether this attribute contract is inherited from its parent instance.
          If true, the rest of the properties in this model become read-only.
          The default value is false.
        type: boolean
      maskOgnlValues:
        description: >-
          Whether or not all OGNL expressions used to fulfill an outgoing
          assertion contract should be masked in the logs. Defaults to false.
        type: boolean
    required:
      - coreAttributes
  IdpAdapterContractMapping:
    properties:
      attributeContractFulfillment:
        additionalProperties:
          $ref: '#/definitions/AttributeFulfillmentValue'
        description: A list of mappings from attribute names to their fulfillment values.
      attributeSources:
        description: A list of configured data stores to look up attributes from.
        items:
          $ref: '#/definitions/AttributeSource'
        type: array
      inherited:
        description: >-
          Whether this attribute mapping is inherited from its parent instance.
          If true, the rest of the properties in this model become read-only.
          The default value is false.
        type: boolean
      issuanceCriteria:
        $ref: '#/definitions/IssuanceCriteria'
        description: >-
          The issuance criteria that this transaction must meet before the
          corresponding attribute contract is fulfilled.
    required:
      - attributeContractFulfillment
  IdpAttributeQuery:
    description: >-
      The attribute query profile supports local applications in requesting user
      attributes from an attribute authority.
    properties:
      nameMappings:
        description: The attribute name mappings between the SP and the IdP.
        items:
          $ref: '#/definitions/AttributeQueryNameMapping'
        type: array
      policy:
        $ref: '#/definitions/IdpAttributeQueryPolicy'
        description: The attribute query profile's security policy.
      url:
        description: >-
          The URL at your IdP partner's site where attribute queries are to be
          sent.
        type: string
    required:
      - url
  IdpAttributeQueryPolicy:
    description: The attribute query profile's security policy.
    properties:
      encryptNameId:
        description: Encrypt the name identifier.
        type: boolean
      maskAttributeValues:
        description: Mask attributes in log files.
        type: boolean
      requireEncryptedAssertion:
        description: Require encrypted assertion.
        type: boolean
      requireSignedAssertion:
        description: Require signed assertion.
        type: boolean
      requireSignedResponse:
        description: Require signed response.
        type: boolean
      signAttributeQuery:
        description: Sign the attribute query.
        type: boolean
  IdpBrowserSso:
    description: >-
      The settings used to enable secure browser-based SSO to resources at your
      site.
    properties:
      adapterMappings:
        description: A list of adapters that map to incoming assertions.
        items:
          $ref: '#/definitions/SpAdapterMapping'
        type: array
      artifact:
        $ref: '#/definitions/ArtifactSettings'
        description: The settings for an artifact binding.
      assertionsSigned:
        description: >-
          Specify whether the incoming SAML assertions are signed rather than
          the entire SAML response being signed.
        type: boolean
      attributeContract:
        $ref: '#/definitions/IdpBrowserSsoAttributeContract'
        description: The list of attributes that the IdP sends in the assertion.
      authenticationPolicyContractMappings:
        description: >-
          A list of Authentication Policy Contracts that map to incoming
          assertions.
        items:
          $ref: '#/definitions/AuthenticationPolicyContractMapping'
        type: array
      authnContextMappings:
        description: >-
          A list of authentication context mappings between local and remote
          values. Applicable for SAML 2.0 and OIDC protocol connections.
        items:
          $ref: '#/definitions/AuthnContextMapping'
        type: array
      decryptionPolicy:
        $ref: '#/definitions/DecryptionPolicy'
        description: The SAML 2.0 decryption policy for browser-based SSO.
      defaultTargetUrl:
        description: >-
          The default target URL for this connection. If defined, this overrides
          the default URL.
        type: string
      enabledProfiles:
        description: >-
          The profiles that are enabled for browser-based SSO. SAML 2.0 supports
          all profiles whereas SAML 1.x IdP connections support both IdP and SP
          (non-standard) initiated SSO. This is required for SAMLx.x
          Connections.
        items:
          $ref: '#/definitions/Profile'
          enum:
            - IDP_INITIATED_SSO
            - SP_INITIATED_SSO
            - IDP_INITIATED_SLO
            - SP_INITIATED_SLO
        type: array
        uniqueItems: true
      idpIdentityMapping:
        $ref: '#/definitions/IdpIdentityMapping'
        description: >-
          Defines the process in which users authenticated by the IdP are
          associated with user accounts local to the SP.
        enum:
          - ACCOUNT_MAPPING
          - ACCOUNT_LINKING
          - NONE
      incomingBindings:
        description: >-
          The SAML bindings that are enabled for browser-based SSO. This is
          required for SAML 2.0 connections. For SAML 1.x based connections, it
          is not used for SP Connections and it is optional for IdP Connections.
        items:
          $ref: '#/definitions/Binding'
          enum:
            - ARTIFACT
            - POST
            - REDIRECT
            - SOAP
        type: array
        uniqueItems: true
      messageCustomizations:
        description: >-
          The message customizations for browser-based SSO. Depending on server
          settings, connection type, and protocol this may or may not be
          supported.
        items:
          $ref: '#/definitions/ProtocolMessageCustomization'
        type: array
      oauthAuthenticationPolicyContractRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          The Authentication policy contract to map into for OAuth. The policy
          contract can subsequently be mapped into the OAuth persistent grant.
      oidcProviderSettings:
        $ref: '#/definitions/OIDCProviderSettings'
        description: >-
          The OpenID Provider configuration settings. Required for an OIDC
          connection.
      protocol:
        $ref: '#/definitions/Protocol'
        description: The browser-based SSO protocol to use.
        enum:
          - SAML20
          - WSFED
          - SAML11
          - SAML10
          - OIDC
      signAuthnRequests:
        description: Determines whether SAML authentication requests should be signed.
        type: boolean
      sloServiceEndpoints:
        description: A list of possible endpoints to send SLO requests and responses.
        items:
          $ref: '#/definitions/SloServiceEndpoint'
        type: array
      ssoOAuthMapping:
        $ref: '#/definitions/SsoOAuthMapping'
        description: Direct mapping from the IdP connection to the OAuth persistent grant.
      ssoServiceEndpoints:
        description: >-
          The IdP SSO endpoints that define where to send your authentication
          requests. Only required for SP initiated SSO. This is required for
          SAML x.x and WS-FED Connections.
        items:
          $ref: '#/definitions/IdpSsoServiceEndpoint'
        type: array
      urlWhitelistEntries:
        description: >-
          For WS-Federation connections, a whitelist of additional allowed
          domains and paths used to validate wreply for SLO, if enabled.
        items:
          $ref: '#/definitions/UrlWhitelistEntry'
        type: array
    required:
      - protocol
      - idpIdentityMapping
  IdpBrowserSsoAttribute:
    description: An attribute for the IdP Browser SSO attribute contract.
    properties:
      masked:
        description: >-
          Specifies whether this attribute is masked in PingFederate logs.
          Defaults to false.
        type: boolean
      name:
        description: The name of this attribute.
        type: string
    required:
      - name
  IdpBrowserSsoAttributeContract:
    description: A set of user attributes that the IdP sends in the SAML assertion.
    properties:
      coreAttributes:
        description: >-
          A list of read-only assertion attributes that are automatically
          populated by PingFederate.
        items:
          $ref: '#/definitions/IdpBrowserSsoAttribute'
        type: array
      extendedAttributes:
        description: >-
          A list of additional attributes that are present in the incoming
          assertion.
        items:
          $ref: '#/definitions/IdpBrowserSsoAttribute'
        type: array
  IdpConnection:
    allOf:
      - description: The set of attributes used to configure an IdP connection.
        properties:
          active:
            description: >-
              Specifies whether the connection is active and ready to process
              incoming requests. The default value is false.
            type: boolean
          additionalAllowedEntitiesConfiguration:
            $ref: '#/definitions/AdditionalAllowedEntitiesConfiguration'
            description: >-
              Additional allowed entities or issuers configuration. Currently
              only used in OIDC IdP (RP) connection.
          attributeQuery:
            $ref: '#/definitions/IdpAttributeQuery'
            description: >-
              The attribute query settings for requesting user attributes from
              an attribute authority.
          baseUrl:
            description: >-
              The fully-qualified hostname and port on which your partner's
              federation deployment runs.
            type: string
          contactInfo:
            $ref: '#/definitions/ContactInfo'
            description: The contact information for this partner.
          credentials:
            $ref: '#/definitions/ConnectionCredentials'
            description: >-
              The certificates and settings for encryption, signing, and
              signature verification. It is required for  SAMLx.x and WS-Fed
              Connections.
          defaultVirtualEntityId:
            description: >-
              The default alternate entity ID that identifies the local server
              to this partner. It is required when virtualEntityIds is not empty
              and must be included in that list.
            type: string
          entityId:
            description: >-
              The partner's entity ID (connection ID) or issuer value (for OIDC
              Connections).
            type: string
          errorPageMsgId:
            description: >-
              Identifier that specifies the message displayed on a user-facing
              error page.
            type: string
          extendedProperties:
            additionalProperties:
              $ref: '#/definitions/ParameterValues'
            description: >-
              Extended Properties allows to store additional information for
              IdP/SP Connections. The names of these extended properties should
              be defined in /extendedProperties.
          id:
            description: >-
              The persistent, unique ID for the connection. It can be any
              combination of [a-zA-Z0-9._-]. This property is system-assigned if
              not specified.
            type: string
          idpBrowserSso:
            $ref: '#/definitions/IdpBrowserSso'
            description: The browser-based SSO settings used to communicate with your IdP.
          idpOAuthGrantAttributeMapping:
            $ref: '#/definitions/IdpOAuthGrantAttributeMapping'
            description: The OAuth Assertion Grant settings used to map from your IdP.
          licenseConnectionGroup:
            description: >-
              The license connection group. If your PingFederate license is
              based on connection groups, each connection must be assigned to a
              group before it can be used.
            type: string
          loggingMode:
            $ref: '#/definitions/LoggingMode'
            description: >-
              The level of transaction logging applicable for this connection.
              Default is STANDARD.
            enum:
              - NONE
              - STANDARD
              - FULL
              - ENHANCED
          metadataReloadSettings:
            $ref: '#/definitions/ConnectionMetadataUrl'
            description: Connection metadata automatic reload settings.
          name:
            description: The connection name.
            type: string
          oidcClientCredentials:
            $ref: '#/definitions/OIDCClientCredentials'
            description: >-
              The OIDC client credentials. This is required for an OIDC
              connection.
          type:
            $ref: '#/definitions/ConnectionType'
            description: The type of this connection. Default is 'IDP'.
            enum:
              - IDP
              - SP
          virtualEntityIds:
            description: >-
              List of alternate entity IDs that identifies the local server to
              this partner.
            items:
              type: string
            type: array
          wsTrust:
            $ref: '#/definitions/IdpWsTrust'
            description: The Ws-Trust settings.
        required:
          - entityId
          - name
      - $ref: '#/definitions/Connection'
  IdpOAuthAttributeContract:
    description: A set of user attributes that the IdP sends in the OAuth Assertion Grant.
    properties:
      coreAttributes:
        description: >-
          A list of read-only assertion attributes that are automatically
          populated by PingFederate.
        items:
          $ref: '#/definitions/IdpBrowserSsoAttribute'
        type: array
      extendedAttributes:
        description: >-
          A list of additional attributes that are present in the incoming
          assertion.
        items:
          $ref: '#/definitions/IdpBrowserSsoAttribute'
        type: array
  IdpOAuthGrantAttributeMapping:
    description: The OAuth Assertion Grant settings used to map from your IdP.
    properties:
      accessTokenManagerMappings:
        description: A mapping in a connection that defines how access tokens are created.
        items:
          $ref: '#/definitions/AccessTokenManagerMapping'
        type: array
      idpOAuthAttributeContract:
        $ref: '#/definitions/IdpOAuthAttributeContract'
        description: >-
          A set of user attributes that the IdP sends in the OAuth Assertion
          Grant.
  IdpSsoServiceEndpoint:
    description: The settings that define an endpoint to an IdP SSO service.
    properties:
      binding:
        $ref: '#/definitions/Binding'
        description: >-
          The binding of this endpoint, if applicable - usually only required
          for SAML 2.0 endpoints.
        enum:
          - ARTIFACT
          - POST
          - REDIRECT
          - SOAP
      url:
        description: >-
          The absolute or relative URL of the endpoint. A relative URL can be
          specified if a base URL for the connection has been defined.
        type: string
    required:
      - binding
      - url
  IdpTokenProcessorMapping:
    description: The IdP Token Processor Mapping.
    properties:
      attributeContractFulfillment:
        additionalProperties:
          $ref: '#/definitions/AttributeFulfillmentValue'
        description: A list of mappings from attribute names to their fulfillment values.
      attributeSources:
        description: A list of configured data stores to look up attributes from.
        items:
          $ref: '#/definitions/AttributeSource'
        type: array
      idpTokenProcessorRef:
        $ref: '#/definitions/ResourceLink'
        description: Reference to the associated token processor.
      issuanceCriteria:
        $ref: '#/definitions/IssuanceCriteria'
        description: >-
          The issuance criteria that this transaction must meet before the
          corresponding attribute contract is fulfilled.
      restrictedVirtualEntityIds:
        description: The list of virtual server IDs that this mapping is restricted to.
        items:
          type: string
        type: array
    required:
      - idpTokenProcessorRef
      - attributeContractFulfillment
  IdpWsTrust:
    description: >-
      Ws-Trust STS provides validation of incoming tokens which enable SSO
      access to Web Services. It also allows generation of local tokens for Web
      Services.
    properties:
      attributeContract:
        $ref: '#/definitions/IdpWsTrustAttributeContract'
        description: A set of user attributes that the SP receives in the incoming token.
      generateLocalToken:
        description: >-
          Indicates whether a local token needs to be generated. The default
          value is false.
        type: boolean
      tokenGeneratorMappings:
        description: >-
          A list of token generators to generate local tokens. Required if a
          local token needs to be generated.
        items:
          $ref: '#/definitions/SpTokenGeneratorMapping'
        type: array
    required:
      - attributeContract
      - generateLocalToken
  IdpWsTrustAttribute:
    description: An attribute for the Ws-Trust attribute contract.
    properties:
      masked:
        description: >-
          Specifies whether this attribute is masked in PingFederate logs.
          Defaults to false.
        type: boolean
      name:
        description: The name of this attribute.
        type: string
    required:
      - name
  IdpWsTrustAttributeContract:
    description: A set of user attributes that this server will receive in the token.
    properties:
      coreAttributes:
        description: >-
          A list of read-only assertion attributes that are automatically
          populated by PingFederate.
        items:
          $ref: '#/definitions/IdpWsTrustAttribute'
        type: array
      extendedAttributes:
        description: >-
          A list of additional attributes that are receive in the incoming
          assertion.
        items:
          $ref: '#/definitions/IdpWsTrustAttribute'
        type: array
  InboundBackChannelAuth:
    allOf:
      - properties:
          certs:
            description: >-
              The certificate used for signature verification and XML
              encryption.
            items:
              $ref: '#/definitions/ConnectionCert'
            type: array
          digitalSignature:
            description: If incoming or outgoing messages must be signed.
            type: boolean
          httpBasicCredentials:
            $ref: '#/definitions/UsernamePasswordCredentials'
            description: >-
              The credentials to use when you authenticate with the SOAP
              endpoint.
          requireSsl:
            description: Incoming HTTP transmissions must use a secure channel.
            type: boolean
          type:
            $ref: '#/definitions/BackChannelAuthType'
            enum:
              - INBOUND
              - OUTBOUND
          verificationIssuerDN:
            description: >-
              If a verification Subject DN is provided, you can optionally
              restrict the issuer to a specific trusted CA by specifying its DN
              in this field.
            type: string
          verificationSubjectDN:
            description: >-
              If this property is set, the verification trust model is Anchored.
              The verification certificate must be signed by a trusted CA and
              included in the incoming message, and the subject DN of the
              expected certificate is specified in this property. If this
              property is not set, then a primary verification certificate must
              be specified in the certs array.
            type: string
      - $ref: '#/definitions/BackChannelAuth'
  IssuanceCriteria:
    description: >-
      A list of criteria that determines whether a transaction (usually a SSO
      transaction) is continued. All criteria must pass in order for the
      transaction to continue.
    properties:
      conditionalCriteria:
        description: >-
          A list of conditional issuance criteria where existing attributes must
          satisfy their conditions against expected values in order for the
          transaction to continue.
        items:
          $ref: '#/definitions/ConditionalIssuanceCriteriaEntry'
        type: array
      expressionCriteria:
        description: >-
          A list of expression issuance criteria where the OGNL expressions must
          evaluate to true in order for the transaction to continue.
        items:
          $ref: '#/definitions/ExpressionIssuanceCriteriaEntry'
        type: array
  JdbcAttributeSource:
    allOf:
      - description: >-
          The configured settings used to look up attributes from a JDBC data
          store.
        properties:
          attributeContractFulfillment:
            additionalProperties:
              $ref: '#/definitions/AttributeFulfillmentValue'
            description: >-
              A list of mappings from attribute names to their fulfillment
              values. This field is only valid for the SP Connection's Browser
              SSO mappings
          dataStoreRef:
            $ref: '#/definitions/ResourceLink'
            description: Reference to the associated data store.
          description:
            description: >-
              The description of this attribute source. The description needs to
              be unique amongst the attribute sources for the mapping.<br>Note:
              Required for APC-to-SP Adapter Mappings
            type: string
          filter:
            description: >-
              The JDBC WHERE clause used to query your data store to locate a
              user record.
            type: string
          id:
            description: >-
              The ID that defines this attribute source. Only alphanumeric
              characters allowed.<br>Note: Required for OpenID Connect policy
              attribute sources, OAuth IdP adapter mappings, OAuth access token
              mappings and APC-to-SP Adapter Mappings. IdP Connections will
              ignore this property since it only allows one attribute source to
              be defined per mapping. IdP-to-SP Adapter Mappings can contain
              multiple attribute sources.
            type: string
          schema:
            description: >-
              Lists the table structure that stores information within a
              database. Some databases, such as Oracle, require a schema for a
              JDBC query. Other databases, such as MySQL, do not require a
              schema.
            type: string
          table:
            description: >-
              The name of the database table. The name is used to construct the
              SQL query to retrieve data from the data store.
            type: string
          type:
            $ref: '#/definitions/DataStoreType'
            description: The data store type of this attribute source.
            enum:
              - LDAP
              - JDBC
              - CUSTOM
        required:
          - type
          - dataStoreRef
          - table
          - filter
      - $ref: '#/definitions/AttributeSource'
  LdapAttributeSource:
    allOf:
      - description: >-
          The configured settings used to look up attributes from a LDAP data
          store.
        properties:
          attributeContractFulfillment:
            additionalProperties:
              $ref: '#/definitions/AttributeFulfillmentValue'
            description: >-
              A list of mappings from attribute names to their fulfillment
              values. This field is only valid for the SP Connection's Browser
              SSO mappings
          baseDn:
            description: >-
              The base DN to search from. If not specified, the search will
              start at the LDAP's root.
            type: string
          binaryAttributeSettings:
            additionalProperties:
              $ref: '#/definitions/BinaryLdapAttributeSettings'
            description: The advanced settings for binary LDAP attributes.
          dataStoreRef:
            $ref: '#/definitions/ResourceLink'
            description: Reference to the associated data store.
          description:
            description: >-
              The description of this attribute source. The description needs to
              be unique amongst the attribute sources for the mapping.<br>Note:
              Required for APC-to-SP Adapter Mappings
            type: string
          id:
            description: >-
              The ID that defines this attribute source. Only alphanumeric
              characters allowed.<br>Note: Required for OpenID Connect policy
              attribute sources, OAuth IdP adapter mappings, OAuth access token
              mappings and APC-to-SP Adapter Mappings. IdP Connections will
              ignore this property since it only allows one attribute source to
              be defined per mapping. IdP-to-SP Adapter Mappings can contain
              multiple attribute sources.
            type: string
          memberOfNestedGroup:
            description: >-
              Set this to true to return transitive group memberships for the
              'memberOf' attribute.  This only applies for Active Directory data
              sources.  All other data sources will be set to false.
            type: boolean
          searchFilter:
            description: >-
              The LDAP filter that will be used to lookup the objects from the
              directory.
            type: string
          searchScope:
            $ref: '#/definitions/LdapSearchScope'
            description: Determines the node depth of the query.
            enum:
              - OBJECT
              - ONE_LEVEL
              - SUBTREE
          type:
            $ref: '#/definitions/DataStoreType'
            description: The data store type of this attribute source.
            enum:
              - LDAP
              - JDBC
              - CUSTOM
        required:
          - type
          - dataStoreRef
          - searchScope
          - searchFilter
      - $ref: '#/definitions/AttributeSource'
  OIDCClientCredentials:
    description: >-
      The OpenID Connect Client Credentials settings. This is required for an
      OIDC Connection.
    properties:
      clientId:
        description: The OpenID Connect client identitification.
        type: string
      clientSecret:
        description: >-
          The OpenID Connect client secret. To update the client secret, specify
          the plaintext value in this field.  This field will not be populated
          for GET requests.
        type: string
      encryptedSecret:
        description: >-
          For GET requests, this field contains the encrypted client secret, if
          one exists.  For POST and PUT requests, if you wish to reuse the
          existing secret, this field should be passed back unchanged.
        type: string
    required:
      - clientId
  OIDCProviderSettings:
    description: The OpenID Provider settings.
    properties:
      authenticationScheme:
        $ref: '#/definitions/OIDCAuthenticationScheme'
        description: >-
          The OpenID Connect Authentication Scheme. This is required for
          Authentication using Code Flow.
        enum:
          - BASIC
          - POST
          - PRIVATE_KEY_JWT
      authenticationSigningAlgorithm:
        $ref: '#/definitions/SigningAlgorithm'
        description: >-
          The authentication signing algorithm for token endpoint
          PRIVATE_KEY_JWT authentication. Only asymmetric algorithms are
          allowed. For RSASSA-PSS signing algorithm, PingFederate must be
          integrated with a hardware security module (HSM) or Java 11.
        enum:
          - NONE
          - HS256
          - HS384
          - HS512
          - RS256
          - RS384
          - RS512
          - ES256
          - ES384
          - ES512
          - PS256
          - PS384
          - PS512
      authorizationEndpoint:
        description: URL of the OpenID Provider's OAuth 2.0 Authorization Endpoint.
        type: string
      jwksURL:
        description: 'URL of the OpenID Provider''s JSON Web Key Set [JWK] document.'
        type: string
      loginType:
        $ref: '#/definitions/OIDCLoginType'
        description: >-
          The OpenID Connect login type. These values maps to: <br>  CODE:
          Authentication using Code Flow <br> POST: Authentication using Form
          Post <br> POST_AT: Authentication using Form Post with Access Token
        enum:
          - CODE
          - POST
          - POST_AT
      requestParameters:
        description: A map of request parameter names and values.
        items:
          $ref: '#/definitions/OIDCRequestParameter'
        type: array
      requestSigningAlgorithm:
        $ref: '#/definitions/SigningAlgorithm'
        description: >-
          The request signing algorithm. Required only if you wish to use signed
          requests. Only asymmetric algorithms are allowed. For RSASSA-PSS
          signing algorithm, PingFederate must be integrated with a hardware
          security module (HSM) or Java 11.
        enum:
          - NONE
          - HS256
          - HS384
          - HS512
          - RS256
          - RS384
          - RS512
          - ES256
          - ES384
          - ES512
          - PS256
          - PS384
          - PS512
      scopes:
        description: Space separated scope values that the OpenID Provider supports.
        type: string
      tokenEndpoint:
        description: URL of the OpenID Provider's OAuth 2.0 Token Endpoint.
        type: string
      userInfoEndpoint:
        description: URL of the OpenID Provider's UserInfo Endpoint.
        type: string
    required:
      - scopes
      - authorizationEndpoint
      - loginType
      - jwksURL
  OIDCRequestParameter:
    description: An OIDC custom request parameter.
    properties:
      applicationEndpointOverride:
        description: >-
          Indicates whether the parameter values can be overriden by the
          Application Endpoint parameters
        type: boolean
      name:
        description: >-
          A List of parameter value. If more than one value is provided, the
          parameter is treated as a multi-valued parameter.
        type: string
      value:
        description: >-
          A List of parameter value. If more than one value is provided, the
          parameter is treated as a multi-valued parameter.
        type: string
    required:
      - name
      - value
      - applicationEndpointOverride
  OutboundBackChannelAuth:
    allOf:
      - properties:
          digitalSignature:
            description: If incoming or outgoing messages must be signed.
            type: boolean
          httpBasicCredentials:
            $ref: '#/definitions/UsernamePasswordCredentials'
            description: >-
              The credentials to use when you authenticate with the SOAP
              endpoint.
          sslAuthKeyPairRef:
            $ref: '#/definitions/ResourceLink'
            description: >-
              The ID of the key pair used to authenticate with your partner's
              SOAP endpoint. The ID of the key pair is also known as the alias
              and can be found by viewing the corresponding certificate under
              'SSL Server Certificates' in the PingFederate Administrative
              Console.
          type:
            $ref: '#/definitions/BackChannelAuthType'
            enum:
              - INBOUND
              - OUTBOUND
          validatePartnerCert:
            description: Validate the partner server certificate. Default is true.
            type: boolean
      - $ref: '#/definitions/BackChannelAuth'
  OutboundProvision:
    description: >-
      Outbound Provisioning allows an IdP to create and maintain user accounts
      at standards-based partner sites using SCIM as well as select-proprietary
      provisioning partner sites that are protocol-enabled.
    properties:
      channels:
        description: >-
          Includes settings of a source data store, managing provisioning
          threads and mapping of attributes.
        items:
          $ref: '#/definitions/Channel'
        type: array
      customSchema:
        $ref: '#/definitions/Schema'
        description: Custom SCIM attribute configuration.
      targetSettings:
        description: >-
          Configuration fields that includes credentials to target SaaS
          application.
        items:
          $ref: '#/definitions/ConfigField'
        type: array
      type:
        description: The SaaS plugin type.
        type: string
    required:
      - type
      - targetSettings
      - channels
  ParameterValues:
    description: Parameter Values.
    properties:
      values:
        description: A List of values
        items:
          type: string
        type: array
  PluginConfiguration:
    description: Configuration settings for a plugin instance.
    properties:
      fields:
        description: List of configuration fields.
        items:
          $ref: '#/definitions/ConfigField'
        type: array
      tables:
        description: List of configuration tables.
        items:
          $ref: '#/definitions/ConfigTable'
        type: array
  PluginInstance:
    description: A plugin instance.
    properties:
      configuration:
        $ref: '#/definitions/PluginConfiguration'
        description: Plugin instance configuration.
      id:
        description: >-
          The ID of the plugin instance. The ID cannot be modified once the
          instance is created.<br>Note: Ignored when specifying a connection's
          adapter override.
        type: string
      name:
        description: >-
          The plugin instance name. The name cannot be modified once the
          instance is created.<br>Note: Ignored when specifying a connection's
          adapter override.
        type: string
      parentRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          The reference to this plugin's parent instance. The parent reference
          is only accepted if the plugin type supports parent
          instances.<br>Note: This parent reference is required if this plugin
          instance is used as an overriding plugin (e.g. connection adapter
          overrides)
      pluginDescriptorRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          Reference to the plugin descriptor for this instance. The plugin
          descriptor cannot be modified once the instance is created.<br>Note:
          Ignored when specifying a connection's adapter override.
    required:
      - id
      - name
      - pluginDescriptorRef
      - configuration
  ProtocolMessageCustomization:
    description: >-
      The message customization that will be executed on outgoing PingFederate
      messages.
    properties:
      contextName:
        description: >-
          The context in which the customization will be applied. Depending on
          the connection type and protocol, this can either be 'assertion',
          'authn-response' or 'authn-request'.
        type: string
      messageExpression:
        description: >-
          The OGNL expression that will be executed. Refer to the Admin Manual
          for a list of variables provided by PingFederate.
        type: string
  ResourceLink:
    description: A reference to a resource.
    properties:
      id:
        description: The ID of the resource.
        type: string
      location:
        description: >-
          A read-only URL that references the resource. If the resource is not
          currently URL-accessible, this property will be null.
        type: string
    required:
      - id
  SaasAttributeMapping:
    description: Settings to map the source record attributes to target attributes.
    properties:
      fieldName:
        description: The name of target field.
        type: string
      saasFieldInfo:
        $ref: '#/definitions/SaasFieldConfiguration'
        description: >-
          The settings that represent how attribute values from source data
          store will be mapped into Fields specified by the service provider.
    required:
      - fieldName
      - saasFieldInfo
  SaasFieldConfiguration:
    description: >-
      The settings that represent how attribute values from source data store
      will be mapped into Fields specified by the service provider.
    properties:
      attributeNames:
        description: >-
          The list of source attribute names used to generate or map to a target
          field
        items:
          type: string
        type: array
        uniqueItems: true
      characterCase:
        $ref: '#/definitions/CharacterCase'
        description: The character case of the field value.
        enum:
          - LOWER
          - UPPER
          - NONE
      createOnly:
        description: >-
          Indicates whether this field is a create only field and cannot be
          updated.
        type: boolean
      defaultValue:
        description: The default value for the target field
        type: string
      expression:
        description: An OGNL expression to obtain a value.
        type: string
      masked:
        description: Indicates whether the attribute should be masked in server logs.
        type: boolean
      parser:
        $ref: '#/definitions/SaasFieldParsing'
        description: Indicates how the field shall be parsed.
        enum:
          - EXTRACT_CN_FROM_DN
          - EXTRACT_USERNAME_FROM_EMAIL
          - NONE
      trim:
        description: Indicates whether field should be trimmed before provisioning.
        type: boolean
  Schema:
    description: Custom SCIM Attributes configuration.
    properties:
      attributes:
        items:
          $ref: '#/definitions/SchemaAttribute'
        type: array
      namespace:
        type: string
  SchemaAttribute:
    description: A custom SCIM attribute.
    properties:
      multiValued:
        description: Indicates whether the attribute is multi-valued.
        type: boolean
      name:
        description: Name of the attribute.
        type: string
      subAttributes:
        description: List of sub-attributes for an attribute.
        items:
          type: string
        type: array
      types:
        description: >-
          Represents the name of each attribute type in case of multi-valued
          attribute.
        items:
          type: string
        type: array
  SigningSettings:
    description: Settings related to signing messages sent to this partner.
    properties:
      algorithm:
        description: >-
          The algorithm used to sign messages sent to this partner. The default
          is SHA1withDSA for DSA certs, SHA256withRSA for RSA certs, and
          SHA256withECDSA for EC certs. For RSA certs, SHA1withRSA,
          SHA384withRSA, and SHA512withRSA are also supported. For EC certs,
          SHA384withECDSA and SHA512withECDSA are also supported. If the
          connection is WS-Federation with JWT token type, then the possible
          values are RSA SHA256, RSA SHA384, RSA SHA512, ECDSA SHA256, ECDSA
          SHA384, ECDSA SHA512
        type: string
      includeCertInSignature:
        description: >-
          Determines whether the signing certificate is included in the
          signature <KeyInfo> element.
        type: boolean
      includeRawKeyInSignature:
        description: >-
          Determines whether the <KeyValue> element with the raw public key is
          included in the signature <KeyInfo> element.
        type: boolean
      signingKeyPairRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          The ID of the key pair used to sign messages sent to this partner. The
          ID of the key pair is also known as the alias and can be found by
          viewing the corresponding certificate under 'Signing & Decryption Keys
          & Certificates' in the PingFederate admin console.
    required:
      - signingKeyPairRef
  SloServiceEndpoint:
    description: Where SLO logout messages are sent. Only applicable for SAML 2.0.
    properties:
      binding:
        $ref: '#/definitions/Binding'
        description: >-
          The binding of this endpoint, if applicable - usually only required
          for SAML 2.0 endpoints.
        enum:
          - ARTIFACT
          - POST
          - REDIRECT
          - SOAP
      responseUrl:
        description: >-
          The absolute or relative URL to which logout responses are sent. A
          relative URL can be specified if a base URL for the connection has
          been defined.
        type: string
      url:
        description: >-
          The absolute or relative URL of the endpoint. A relative URL can be
          specified if a base URL for the connection has been defined.
        type: string
    required:
      - binding
      - url
  SourceTypeIdKey:
    description: >-
      A key that is meant to reference a source from which an attribute can be
      retrieved. This model is usually paired with a value which, depending on
      the SourceType, can be a hardcoded value or a reference to an attribute
      name specific to that SourceType. Not all values are applicable - a
      validation error will be returned for incorrect values.<br>For each
      SourceType, the value should be:<br>ACCOUNT_LINK - If account linking was
      enabled for the browser SSO, the value must be 'Local User ID', unless it
      has been overridden in PingFederate's server configuration.<br>ADAPTER -
      The value is one of the attributes of the IdP Adapter.<br>ASSERTION - The
      value is one of the attributes coming from the SAML
      assertion.<br>AUTHENTICATION_POLICY_CONTRACT - The value is one of the
      attributes coming from an authentication policy
      contract.<br>LOCAL_IDENTITY_PROFILE - The value is one of the fields
      coming from a local identity profile.<br>CONTEXT - The value must be one
      of the following ['TargetResource' or 'OAuthScopes' or 'ClientId' or
      'AuthenticationCtx' or 'ClientIp' or 'Locale' or 'StsBasicAuthUsername' or
      'StsSSLClientCertSubjectDN' or 'StsSSLClientCertChain' or
      'VirtualServerId' or 'AuthenticatingAuthority' or
      'DefaultPersistentGrantLifetime']<br>CLAIMS - Attributes provided by the
      OIDC Provider.<br>CUSTOM_DATA_STORE - The value is one of the attributes
      returned by this custom data store.<br>EXPRESSION - The value is an OGNL
      expression.<br>EXTENDED_CLIENT_METADATA - The value is from an OAuth
      extended client metadata parameter. This source type is deprecated and has
      been replaced by EXTENDED_PROPERTIES.<br>EXTENDED_PROPERTIES - The value
      is from an OAuth Client's extended property.<br>IDP_CONNECTION - The value
      is one of the attributes passed in by the IdP
      connection.<br>JDBC_DATA_STORE - The value is one of the column names
      returned from the JDBC attribute source.<br>LDAP_DATA_STORE - The value is
      one of the LDAP attributes supported by your LDAP data
      store.<br>MAPPED_ATTRIBUTES - The value is the name of one of the mapped
      attributes that is defined in the associated attribute
      mapping.<br>OAUTH_PERSISTENT_GRANT - The value is one of the attributes
      from the persistent grant.<br>PASSWORD_CREDENTIAL_VALIDATOR - The value is
      one of the attributes of the PCV.<br>NO_MAPPING - A placeholder value to
      indicate that an attribute currently has no mapped source.TEXT - A
      hardcoded value that is used to populate the corresponding
      attribute.<br>TOKEN - The value is one of the token attributes.<br>REQUEST
      - The value is from the request context such as the CIBA identity hint
      contract or the request contract for Ws-Trust.<br>TRACKED_HTTP_PARAMS -
      The value is from the original request parameters.<br>SUBJECT_TOKEN - The
      value is one of the OAuth 2.0 Token exchange subject_token
      attributes.<br>ACTOR_TOKEN - The value is one of the OAuth 2.0 Token
      exchange actor_token attributes.<br>TOKEN_EXCHANGE_PROCESSOR_POLICY - The
      value is one of the attributes coming from a Token Exchange Processor
      policy.
    properties:
      id:
        description: >-
          The attribute source ID that refers to the attribute source that this
          key references. In some resources, the ID is optional and will be
          ignored. In these cases the ID should be omitted. If the source type
          is not an attribute source then the ID can be omitted.
        type: string
      type:
        $ref: '#/definitions/SourceType'
        description: The source type of this key.
        enum:
          - TOKEN_EXCHANGE_PROCESSOR_POLICY
          - ACCOUNT_LINK
          - ADAPTER
          - ASSERTION
          - CONTEXT
          - CUSTOM_DATA_STORE
          - EXPRESSION
          - JDBC_DATA_STORE
          - LDAP_DATA_STORE
          - MAPPED_ATTRIBUTES
          - NO_MAPPING
          - TEXT
          - TOKEN
          - REQUEST
          - OAUTH_PERSISTENT_GRANT
          - SUBJECT_TOKEN
          - ACTOR_TOKEN
          - PASSWORD_CREDENTIAL_VALIDATOR
          - IDP_CONNECTION
          - AUTHENTICATION_POLICY_CONTRACT
          - CLAIMS
          - LOCAL_IDENTITY_PROFILE
          - EXTENDED_CLIENT_METADATA
          - EXTENDED_PROPERTIES
          - TRACKED_HTTP_PARAMS
    required:
      - type
  SpAdapter:
    description: An SP adapter instance.
    properties:
      attributeContract:
        $ref: '#/definitions/SpAdapterAttributeContract'
        description: The list of attributes that the SP adapter provides.
      configuration:
        $ref: '#/definitions/PluginConfiguration'
        description: Plugin instance configuration.
      id:
        description: >-
          The ID of the plugin instance. The ID cannot be modified once the
          instance is created.<br>Note: Ignored when specifying a connection's
          adapter override.
        type: string
      name:
        description: >-
          The plugin instance name. The name cannot be modified once the
          instance is created.<br>Note: Ignored when specifying a connection's
          adapter override.
        type: string
      parentRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          The reference to this plugin's parent instance. The parent reference
          is only accepted if the plugin type supports parent
          instances.<br>Note: This parent reference is required if this plugin
          instance is used as an overriding plugin (e.g. connection adapter
          overrides)
      pluginDescriptorRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          Reference to the plugin descriptor for this instance. The plugin
          descriptor cannot be modified once the instance is created.<br>Note:
          Ignored when specifying a connection's adapter override.
      targetApplicationInfo:
        $ref: '#/definitions/SpAdapterTargetApplicationInfo'
        description: The target application's name and icon URL
    required:
      - id
      - name
      - pluginDescriptorRef
      - configuration
  SpAdapterAttribute:
    description: An attribute for the SP adapter attribute contract.
    properties:
      name:
        description: The name of this attribute.
        type: string
    required:
      - name
  SpAdapterAttributeContract:
    description: A set of attributes exposed by an SP adapter.
    properties:
      coreAttributes:
        description: >-
          A list of read-only attributes that are automatically populated by the
          SP adapter descriptor.
        items:
          $ref: '#/definitions/SpAdapterAttribute'
        type: array
      extendedAttributes:
        description: >-
          A list of additional attributes that can be returned by the SP
          adapter. The extended attributes are only used if the adapter supports
          them.
        items:
          $ref: '#/definitions/SpAdapterAttribute'
        type: array
      inherited:
        description: >-
          Whether this attribute contract is inherited from its parent instance.
          If true, the rest of the properties in this model become read-only.
          The default value is false.
        type: boolean
  SpAdapterMapping:
    description: A mapping to a SP adapter.
    properties:
      adapterOverrideSettings:
        $ref: '#/definitions/SpAdapter'
        description: Connection specific overridden adapter instance for mapping.
      attributeContractFulfillment:
        additionalProperties:
          $ref: '#/definitions/AttributeFulfillmentValue'
        description: A list of mappings from attribute names to their fulfillment values.
      attributeSources:
        description: A list of configured data stores to look up attributes from.
        items:
          $ref: '#/definitions/AttributeSource'
        type: array
      issuanceCriteria:
        $ref: '#/definitions/IssuanceCriteria'
        description: >-
          The issuance criteria that this transaction must meet before the
          corresponding attribute contract is fulfilled.
      restrictVirtualEntityIds:
        description: Restricts this mapping to specific virtual entity IDs.
        type: boolean
      restrictedVirtualEntityIds:
        description: The list of virtual server IDs that this mapping is restricted to.
        items:
          type: string
        type: array
      spAdapterRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          Reference to the associated SP adapter.<br>Note: This is ignored if
          adapter overrides for this mapping exists. In this case, the
          override's parent adapter reference is used.
    required:
      - spAdapterRef
      - attributeContractFulfillment
  SpAdapterTargetApplicationInfo:
    description: Target Application Information exposed by an SP adapter.
    properties:
      applicationIconUrl:
        description: The application icon URL.
        type: string
      applicationName:
        description: The application name.
        type: string
      inherited:
        description: >-
          Specifies Whether target application information is inherited from its
          parent instance. If true, the rest of the properties in this model
          become read-only. The default value is false.
        type: boolean
  SpAttributeQuery:
    description: The attribute query profile supports SPs in requesting user attributes.
    properties:
      attributeContractFulfillment:
        additionalProperties:
          $ref: '#/definitions/AttributeFulfillmentValue'
        description: A list of mappings from attribute names to their fulfillment values.
      attributeSources:
        description: A list of configured data stores to look up attributes from.
        items:
          $ref: '#/definitions/AttributeSource'
        type: array
      attributes:
        description: >-
          The list of attributes that may be returned to the SP in the response
          to an attribute request.
        items:
          type: string
        type: array
        uniqueItems: true
      issuanceCriteria:
        $ref: '#/definitions/IssuanceCriteria'
        description: >-
          The issuance criteria that this transaction must meet before the
          corresponding attribute contract is fulfilled.
      policy:
        $ref: '#/definitions/SpAttributeQueryPolicy'
        description: The attribute query profile's security policy.
    required:
      - attributes
      - attributeSources
      - attributeContractFulfillment
  SpAttributeQueryPolicy:
    description: The attribute query profile's security policy.
    properties:
      encryptAssertion:
        description: Encrypt the assertion.
        type: boolean
      requireEncryptedNameId:
        description: Require an encrypted name identifier.
        type: boolean
      requireSignedAttributeQuery:
        description: Require signed attribute query.
        type: boolean
      signAssertion:
        description: Sign the assertion.
        type: boolean
      signResponse:
        description: Sign the response.
        type: boolean
  SpBrowserSso:
    description: >-
      The SAML settings used to enable secure browser-based SSO to resources at
      your partner's site.
    properties:
      adapterMappings:
        description: A list of adapters that map to outgoing assertions.
        items:
          $ref: '#/definitions/IdpAdapterAssertionMapping'
        type: array
      artifact:
        $ref: '#/definitions/ArtifactSettings'
        description: The settings for an artifact binding.
      assertionLifetime:
        $ref: '#/definitions/AssertionLifetime'
        description: >-
          The timeframe of validity before and after the issuance of the
          assertion.
      attributeContract:
        $ref: '#/definitions/SpBrowserSsoAttributeContract'
        description: A set of user attributes that the IdP sends in the SAML assertion.
      authenticationPolicyContractAssertionMappings:
        description: >-
          A list of authentication policy contracts that map to outgoing
          assertions.
        items:
          $ref: '#/definitions/AuthenticationPolicyContractAssertionMapping'
        type: array
      defaultTargetUrl:
        description: >-
          Default Target URL for SAML1.x connections. For SP connections, this
          default URL represents the destination on the SP where the user will
          be directed. For IdP connections, entering a URL in the Default Target
          URL field overrides the SP Default URL SSO setting.
        type: string
      enabledProfiles:
        description: >-
          The profiles that are enabled for browser-based SSO. SAML 2.0 supports
          all profiles whereas SAML 1.x IdP connections support both IdP and SP
          (non-standard) initiated SSO. This is required for SAMLx.x
          Connections.
        items:
          $ref: '#/definitions/Profile'
          enum:
            - IDP_INITIATED_SSO
            - SP_INITIATED_SSO
            - IDP_INITIATED_SLO
            - SP_INITIATED_SLO
        type: array
        uniqueItems: true
      encryptionPolicy:
        $ref: '#/definitions/EncryptionPolicy'
        description: >-
          The SAML 2.0 encryption policy for browser-based SSO. Required for
          SAML 2.0 connections.
      incomingBindings:
        description: >-
          The SAML bindings that are enabled for browser-based SSO. This is
          required for SAML 2.0 connections. For SAML 1.x based connections, it
          is not used for SP Connections and it is optional for IdP Connections.
        items:
          $ref: '#/definitions/Binding'
          enum:
            - ARTIFACT
            - POST
            - REDIRECT
            - SOAP
        type: array
        uniqueItems: true
      messageCustomizations:
        description: >-
          The message customizations for browser-based SSO. Depending on server
          settings, connection type, and protocol this may or may not be
          supported.
        items:
          $ref: '#/definitions/ProtocolMessageCustomization'
        type: array
      protocol:
        $ref: '#/definitions/Protocol'
        description: The browser-based SSO protocol to use.
        enum:
          - SAML20
          - WSFED
          - SAML11
          - SAML10
          - OIDC
      requireSignedAuthnRequests:
        description: >-
          Require AuthN requests to be signed when received via the POST or
          Redirect bindings.
        type: boolean
      signAssertions:
        description: Always sign the SAML Assertion.
        type: boolean
      signResponseAsRequired:
        description: >-
          Sign SAML Response as required by the associated binding and
          encryption policy. Applicable to SAML2.0 only and is defaulted to
          true. It can be set to false only on SAML2.0 connections when
          signAssertions is set to true.
        type: boolean
      sloServiceEndpoints:
        description: A list of possible endpoints to send SLO requests and responses.
        items:
          $ref: '#/definitions/SloServiceEndpoint'
        type: array
      spSamlIdentityMapping:
        $ref: '#/definitions/SpSamlIdentityMapping'
        description: >-
          Process in which users authenticated by the IdP are associated with
          user accounts local to the SP.
        enum:
          - PSEUDONYM
          - STANDARD
          - TRANSIENT
      spWsFedIdentityMapping:
        $ref: '#/definitions/SpWsFedIdentityMapping'
        description: >-
          Process in which users authenticated by the IdP are associated with
          user accounts local to the SP for WS-Federation connection types.
        enum:
          - EMAIL_ADDRESS
          - USER_PRINCIPLE_NAME
          - COMMON_NAME
      ssoServiceEndpoints:
        description: A list of possible endpoints to send assertions to.
        items:
          $ref: '#/definitions/SpSsoServiceEndpoint'
        type: array
      urlWhitelistEntries:
        description: >-
          For WS-Federation connections, a whitelist of additional allowed
          domains and paths used to validate wreply for SLO, if enabled.
        items:
          $ref: '#/definitions/UrlWhitelistEntry'
        type: array
      wsFedTokenType:
        $ref: '#/definitions/WsFedTokenType'
        description: The WS-Federation Token Type to use.
        enum:
          - SAML11
          - SAML20
          - JWT
      wsTrustVersion:
        $ref: '#/definitions/WsTrustVersion'
        description: >-
          The WS-Trust version for a WS-Federation connection. The default
          version is WSTRUST12.
        enum:
          - WSTRUST12
          - WSTRUST13
    required:
      - protocol
      - ssoServiceEndpoints
      - encryptionPolicy
      - attributeContract
      - adapterMappings
      - assertionLifetime
  SpBrowserSsoAttribute:
    description: An attribute for the SP Browser SSO attribute contract.
    properties:
      name:
        description: The name of this attribute.
        type: string
      nameFormat:
        description: The SAML Name Format for the attribute.
        type: string
    required:
      - nameFormat
      - name
  SpBrowserSsoAttributeContract:
    description: A set of user attributes that the IdP sends in the SAML assertion.
    properties:
      coreAttributes:
        description: >-
          A list of read-only assertion attributes (for example, SAML_SUBJECT)
          that are automatically populated by PingFederate.
        items:
          $ref: '#/definitions/SpBrowserSsoAttribute'
        type: array
      extendedAttributes:
        description: >-
          A list of additional attributes that are added to the outgoing
          assertion.
        items:
          $ref: '#/definitions/SpBrowserSsoAttribute'
        type: array
  SpConnection:
    allOf:
      - description: The set of attributes used to configure an SP connection.
        properties:
          active:
            description: >-
              Specifies whether the connection is active and ready to process
              incoming requests. The default value is false.
            type: boolean
          additionalAllowedEntitiesConfiguration:
            $ref: '#/definitions/AdditionalAllowedEntitiesConfiguration'
            description: >-
              Additional allowed entities or issuers configuration. Currently
              only used in OIDC IdP (RP) connection.
          applicationIconUrl:
            description: The application icon url.
            type: string
          applicationName:
            description: The application name.
            type: string
          attributeQuery:
            $ref: '#/definitions/SpAttributeQuery'
            description: >-
              The attribute query settings for supporting SPs in requesting user
              attributes.
          baseUrl:
            description: >-
              The fully-qualified hostname and port on which your partner's
              federation deployment runs.
            type: string
          contactInfo:
            $ref: '#/definitions/ContactInfo'
            description: The contact information for this partner.
          credentials:
            $ref: '#/definitions/ConnectionCredentials'
            description: >-
              The certificates and settings for encryption, signing, and
              signature verification. It is required for  SAMLx.x and WS-Fed
              Connections.
          defaultVirtualEntityId:
            description: >-
              The default alternate entity ID that identifies the local server
              to this partner. It is required when virtualEntityIds is not empty
              and must be included in that list.
            type: string
          entityId:
            description: >-
              The partner's entity ID (connection ID) or issuer value (for OIDC
              Connections).
            type: string
          extendedProperties:
            additionalProperties:
              $ref: '#/definitions/ParameterValues'
            description: >-
              Extended Properties allows to store additional information for
              IdP/SP Connections. The names of these extended properties should
              be defined in /extendedProperties.
          id:
            description: >-
              The persistent, unique ID for the connection. It can be any
              combination of [a-zA-Z0-9._-]. This property is system-assigned if
              not specified.
            type: string
          licenseConnectionGroup:
            description: >-
              The license connection group. If your PingFederate license is
              based on connection groups, each connection must be assigned to a
              group before it can be used.
            type: string
          loggingMode:
            $ref: '#/definitions/LoggingMode'
            description: >-
              The level of transaction logging applicable for this connection.
              Default is STANDARD.
            enum:
              - NONE
              - STANDARD
              - FULL
              - ENHANCED
          metadataReloadSettings:
            $ref: '#/definitions/ConnectionMetadataUrl'
            description: Connection metadata automatic reload settings.
          name:
            description: The connection name.
            type: string
          outboundProvision:
            $ref: '#/definitions/OutboundProvision'
            description: The Outbound Provision settings.
          spBrowserSso:
            $ref: '#/definitions/SpBrowserSso'
            description: The browser-based SSO settings used to communicate with your SP.
          type:
            $ref: '#/definitions/ConnectionType'
            description: The type of this connection. This must be set to 'SP'.
            enum:
              - IDP
              - SP
          virtualEntityIds:
            description: >-
              List of alternate entity IDs that identifies the local server to
              this partner.
            items:
              type: string
            type: array
          wsTrust:
            $ref: '#/definitions/SpWsTrust'
            description: The Ws-Trust settings.
        required:
          - type
          - entityId
          - name
      - $ref: '#/definitions/Connection'
  SpConnections:
    description: A collection of SP connections.
    properties:
      items:
        description: The actual list of connections.
        items:
          $ref: '#/definitions/SpConnection'
        type: array
  SpSsoServiceEndpoint:
    description: The settings that define a service endpoint to a SP SSO service.
    properties:
      binding:
        $ref: '#/definitions/Binding'
        description: >-
          The binding of this endpoint, if applicable - usually only required
          for SAML 2.0 endpoints.  Supported bindings are Artifact and POST.
        enum:
          - ARTIFACT
          - POST
          - REDIRECT
          - SOAP
      index:
        description: The priority of the endpoint.
        format: int32
        type: integer
      isDefault:
        description: >-
          Whether or not this endpoint is the default endpoint. Defaults to
          false.
        type: boolean
      url:
        description: >-
          The absolute or relative URL of the endpoint. A relative URL can be
          specified if a base URL for the connection has been defined.
        type: string
    required:
      - binding
      - url
      - index
  SpTokenGeneratorMapping:
    description: The SP Token Generator Mapping.
    properties:
      attributeContractFulfillment:
        additionalProperties:
          $ref: '#/definitions/AttributeFulfillmentValue'
        description: A list of mappings from attribute names to their fulfillment values.
      attributeSources:
        description: A list of configured data stores to look up attributes from.
        items:
          $ref: '#/definitions/AttributeSource'
        type: array
      defaultMapping:
        description: >-
          Indicates whether the token generator mapping is the default mapping.
          The default value is false.
        type: boolean
      issuanceCriteria:
        $ref: '#/definitions/IssuanceCriteria'
        description: >-
          The issuance criteria that this transaction must meet before the
          corresponding attribute contract is fulfilled.
      restrictedVirtualEntityIds:
        description: The list of virtual server IDs that this mapping is restricted to.
        items:
          type: string
        type: array
      spTokenGeneratorRef:
        $ref: '#/definitions/ResourceLink'
        description: Reference to the associated token generator.
    required:
      - spTokenGeneratorRef
      - attributeContractFulfillment
  SpWsTrust:
    description: >-
      Ws-Trust STS provides security-token validation and creation to extend SSO
      access to identity-enabled Web Services
    properties:
      abortIfNotFulfilledFromRequest:
        description: >-
          If the attribute contract cannot be fulfilled using data from the
          Request, abort the transaction.
        type: boolean
      attributeContract:
        $ref: '#/definitions/SpWsTrustAttributeContract'
        description: A set of user attributes that the IdP sends in the token.
      defaultTokenType:
        $ref: '#/definitions/SamlTokenType'
        description: >-
          The default token type when a web service client (WSC) does not
          specify in the token request which token type the STS should issue.
          Defaults to SAML 2.0.
        enum:
          - SAML20
          - SAML11
          - SAML11_O365
      encryptSaml2Assertion:
        description: >-
          When selected, the STS encrypts the SAML 2.0 assertion. Applicable
          only to SAML 2.0 security token.  This option does not apply to OAuth
          assertion profiles.
        type: boolean
      generateKey:
        description: >-
          When selected, the STS generates a symmetric key to be used in
          conjunction with the "Holder of Key" (HoK) designation for the
          assertion's Subject Confirmation Method.  This option does not apply
          to OAuth assertion profiles.
        type: boolean
      messageCustomizations:
        description: >-
          The message customizations for WS-Trust. Depending on server settings,
          connection type, and protocol this may or may not be supported.
        items:
          $ref: '#/definitions/ProtocolMessageCustomization'
        type: array
      minutesAfter:
        description: >-
          The amount of time after the SAML token was issued during which it is
          to be considered valid. The default value is 30.
        format: int32
        type: integer
      minutesBefore:
        description: >-
          The amount of time before the SAML token was issued during which it is
          to be considered valid. The default value is 5.
        format: int32
        type: integer
      oAuthAssertionProfiles:
        description: 'When selected, four additional token-type requests become available.'
        type: boolean
      partnerServiceIds:
        description: The partner service identifiers.
        items:
          type: string
        type: array
      requestContractRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          Request Contract to be used to map attribute values into the security
          token.
      tokenProcessorMappings:
        description: A list of token processors to validate incoming tokens.
        items:
          $ref: '#/definitions/IdpTokenProcessorMapping'
        type: array
    required:
      - partnerServiceIds
      - attributeContract
      - tokenProcessorMappings
  SpWsTrustAttribute:
    description: An attribute for the Ws-Trust attribute contract.
    properties:
      name:
        description: The name of this attribute.
        type: string
      namespace:
        description: >-
          The attribute namespace.  This required when the Default Token Type is
          SAML1.1 or SAML1.1 for Office 365.
        type: string
    required:
      - namespace
      - name
  SpWsTrustAttributeContract:
    description: A set of user attributes that this server will send in the token.
    properties:
      coreAttributes:
        description: >-
          A list of read-only assertion attributes that are automatically
          populated by PingFederate.
        items:
          $ref: '#/definitions/SpWsTrustAttribute'
        type: array
      extendedAttributes:
        description: >-
          A list of additional attributes that are added to the outgoing
          assertion.
        items:
          $ref: '#/definitions/SpWsTrustAttribute'
        type: array
  SsoOAuthMapping:
    description: IdP Browser SSO OAuth Attribute Mapping
    properties:
      attributeContractFulfillment:
        additionalProperties:
          $ref: '#/definitions/AttributeFulfillmentValue'
        description: A list of mappings from attribute names to their fulfillment values.
      attributeSources:
        description: A list of configured data stores to look up attributes from.
        items:
          $ref: '#/definitions/AttributeSource'
        type: array
      issuanceCriteria:
        $ref: '#/definitions/IssuanceCriteria'
        description: >-
          The issuance criteria that this transaction must meet before the
          corresponding attribute contract is fulfilled.
    required:
      - attributeContractFulfillment
  UrlWhitelistEntry:
    description: Url domain and path to be used as whitelist in WS-Federation connection
    properties:
      allowQueryAndFragment:
        description: Allow Any Query/Fragment
        type: boolean
      requireHttps:
        description: Require HTTPS
        type: boolean
      validDomain:
        description: Valid Domain Name (leading wildcard '*.' allowed)
        type: string
      validPath:
        description: Valid Path (leave blank to allow any path)
        type: string
  UsernamePasswordCredentials:
    description: Username and password credentials.
    properties:
      encryptedPassword:
        description: >-
          For GET requests, this field contains the encrypted password, if one
          exists.  For POST and PUT requests, if you wish to reuse the existing
          password, this field should be passed back unchanged.
        type: string
      password:
        description: >-
          User password.  To update the password, specify the plaintext value in
          this field.  This field will not be populated for GET requests.
        type: string
      username:
        description: The username.
        type: string
  ValidationError:
    description: A data input validation error.
    properties:
      developerMessage:
        description: 'Developer-oriented error message, if available.'
        type: string
      errorId:
        description: Error identifier.
        type: string
      fieldPath:
        description: 'The path to the model field to which the error relates, if one exists.'
        type: string
      message:
        description: User-friendly error description.
        type: string
  X509File:
    description: Encoded certificate data.
    properties:
      cryptoProvider:
        $ref: '#/definitions/CryptoProvider'
        description: >-
          Cryptographic Provider. This is only applicable if Hybrid HSM mode is
          true.
        enum:
          - LOCAL
          - HSM
      fileData:
        description: >-
          The certificate data in PEM format. New line characters should be
          omitted or encoded in this value.
        type: string
      id:
        description: >-
          The persistent, unique ID for the certificate. It can be any
          combination of [a-z0-9._-]. This property is system-assigned if not
          specified.
        type: string
    required:
      - fileData
host: 'ip-10-101-29-72:9999'
info:
  title: 'ip-10-101-29-72:9999'
  version: v1
paths:
  /idp/spConnections:
    get:
      description: >-
        Get a list of all the WS-Fed, WS-Trust, SAML1.0, SAML1.1 and SAML 2.0 SP
        connections.
      operationId: getConnections
      parameters:
        - description: Entity ID of the connection to fetch. (case-sensitive)
          in: query
          name: entityId
          required: false
          type: string
        - description: Page number to retrieve.
          format: int32
          in: query
          name: page
          required: false
          type: integer
        - description: Number of connections per page.
          format: int32
          in: query
          name: numberPerPage
          required: false
          type: integer
        - description: >-
            Filter criteria limits the SP connections that are returned to only
            those that match it. The filter criteria is compared to the SP
            connection name and partner entity ID fields. The comparison is a
            case-insensitive partial match. No additional pattern based matching
            is supported.
          in: query
          name: filter
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/SpConnections'
        '403':
          description: >-
            PingFederate does not have its IdP role enabled. Operation not
            available.
        '422':
          description: Validation error(s) occurred.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Get list of SP connections.
    post:
      consumes:
        - application/json
      description: >-
        Create a new SP connection. If the SP connection is not properly
        configured, a 422 status code is returned along with a list of
        validation errors that must be corrected.
      operationId: createConnection
      parameters:
        - description: Configuration for new connection.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SpConnection'
        - default: false
          description: >-
            External validation will be bypassed when set to true. Default to
            false.
          in: header
          name: X-BypassExternalValidation
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: No response was specified
          schema:
            $ref: '#/definitions/SpConnection'
        '201':
          description: Connection created.
        '400':
          description: The request was improperly formatted or contained invalid fields.
        '403':
          description: >-
            PingFederate does not have its IdP role enabled. Operation not
            available.
        '422':
          description: Validation error(s) occurred.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Create a new SP connection.
  '/idp/spConnections/{id}':
    delete:
      description: >-
        Delete an SP connection with the specified ID. A 404 status code is
        returned for nonexistent IDs. Note: Only inactive connections can be
        deleted. If the request succeeds, the response body is empty. If the
        request fails, an ApiResult is returned with details of the error.
      operationId: deleteConnection
      parameters:
        - description: ID of SP Connection to delete.
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: No response was specified
          schema:
            $ref: '#/definitions/ApiResult'
        '204':
          description: Connection deleted.
        '403':
          description: >-
            PingFederate does not have its IdP role enabled. Operation not
            available.
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/ApiResult'
        '422':
          description: Resource is in use and cannot be deleted.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Delete an SP connection.
    get:
      description: >-
        Get an SP connection with the specified ID. A 404 status code is
        returned for nonexistent IDs.
      operationId: getConnection
      parameters:
        - description: ID of the SP Connection to fetch.
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/SpConnection'
        '403':
          description: >-
            PingFederate does not have its IdP role enabled. Operation not
            available.
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Find SP connection by ID.
    put:
      consumes:
        - application/json
      description: >-
        Update an SP connection with the matching ID. If the SP connection is
        not properly configured, a 422 status code is returned along with a list
        of validation errors that must be corrected. Note: A 404 status code is
        returned for nonexistent IDs.
      operationId: updateConnection
      parameters:
        - description: ID of SP Connection to update.
          in: path
          name: id
          required: true
          type: string
        - description: Configuration for updated connection.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SpConnection'
        - default: false
          description: >-
            External validation will be bypassed when set to true. Default to
            false.
          in: header
          name: X-BypassExternalValidation
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: Connection updated.
          schema:
            $ref: '#/definitions/SpConnection'
        '400':
          description: The request was improperly formatted or contained invalid fields.
        '403':
          description: >-
            PingFederate does not have its IdP role enabled. Operation not
            available.
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/ApiResult'
        '422':
          description: Validation error(s) occurred.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Update an SP connection.
  '/idp/spConnections/{id}/credentials/certs':
    get:
      operationId: getConnectionCerts
      parameters:
        - description: ID of the SP Connection.
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/ConnectionCerts'
        '403':
          description: >-
            PingFederate does not have its IdP role enabled. Operation not
            available.
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Get the SP connection's certificates.
    post:
      consumes:
        - application/json
      description: >-
        If the certificate's activeVerificationCert flag is set to true, it will
        become the connection's primary verification certificate.
      operationId: addConnectionCert
      parameters:
        - description: ID of the SP Connection to update.
          in: path
          name: id
          required: true
          type: string
        - description: Configuration for a verification certificate.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ConnectionCert'
      produces:
        - application/json
      responses:
        '200':
          description: No response was specified
          schema:
            $ref: '#/definitions/ConnectionCert'
        '201':
          description: Connection Certificate added.
        '400':
          description: The request was improperly formatted or contained invalid fields.
        '403':
          description: >-
            PingFederate does not have its IdP role enabled. Operation not
            available.
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/ApiResult'
        '422':
          description: Validation error(s) occurred.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Add a new SP connection certificate.
    put:
      consumes:
        - application/json
      operationId: updateConnectionCerts
      parameters:
        - description: ID of the SP Connection to update.
          in: path
          name: id
          required: true
          type: string
        - description: Configuration for a verification certificates.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ConnectionCerts'
      produces:
        - application/json
      responses:
        '200':
          description: Connection updated.
          schema:
            $ref: '#/definitions/ConnectionCerts'
        '400':
          description: The request was improperly formatted or contained invalid fields.
        '403':
          description: >-
            PingFederate does not have its IdP role enabled. Operation not
            available.
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/ApiResult'
        '422':
          description: Validation error(s) occurred.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Update the SP connection's certificates.
  '/idp/spConnections/{id}/credentials/decryptionKeys':
    get:
      consumes:
        - application/json
      operationId: getDecryptionKeys
      parameters:
        - description: ID of the SP Connection to update.
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/DecryptionKeys'
        '403':
          description: >-
            PingFederate does not have its IdP role enabled. Operation not
            available.
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Get the decryption keys of an SP connection.
    put:
      consumes:
        - application/json
      operationId: updateDecryptionKeys
      parameters:
        - description: ID of the SP Connection to update.
          in: path
          name: id
          required: true
          type: string
        - description: Configuration for decryption keys.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DecryptionKeys'
      produces:
        - application/json
      responses:
        '200':
          description: Connection updated.
          schema:
            $ref: '#/definitions/DecryptionKeys'
        '400':
          description: The request was improperly formatted or contained invalid fields.
        '403':
          description: >-
            PingFederate does not have its IdP role enabled. Operation not
            available.
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/ApiResult'
        '422':
          description: Validation error(s) occurred.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Updating the SP connection's decryption keys.
  '/idp/spConnections/{id}/credentials/signingSettings':
    get:
      operationId: getSigningSettings
      parameters:
        - description: ID of the SP Connection.
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/SigningSettings'
        '403':
          description: >-
            PingFederate does not have its IdP role enabled. Operation not
            available.
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Get the SP connection's signature settings.
    put:
      operationId: updateSigningSettings
      parameters:
        - description: ID of the SP Connection to update.
          in: path
          name: id
          required: true
          type: string
        - description: Signature settings.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SigningSettings'
      produces:
        - application/json
      responses:
        '200':
          description: Connection updated.
          schema:
            $ref: '#/definitions/SigningSettings'
        '400':
          description: The request was improperly formatted or contained invalid fields.
        '403':
          description: >-
            PingFederate does not have its IdP role enabled. Operation not
            available.
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/ApiResult'
        '422':
          description: Validation error(s) occurred.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Update the SP connection's signature settings.
schemes:
  - https
swagger: '2.0'

