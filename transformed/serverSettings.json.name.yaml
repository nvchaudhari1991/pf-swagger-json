basePath: /pf-admin-api/v1
definitions:
  ApiResult:
    description: Details on the result of the operation.
    properties:
      developerMessage:
        description: 'Developer-oriented error message, if available.'
        type: string
      message:
        description: Success or error message.
        type: string
      resultId:
        description: Result identifier.
        type: string
      validationErrors:
        description: 'List of validation errors, if any.'
        items:
          $ref: '#/definitions/ValidationError'
        type: array
  BaseProviderRole:
    description: Base Provider Role.
    properties:
      enable:
        type: boolean
      enableSaml10:
        description: Enable SAML 1.0.
        type: boolean
      enableSaml11:
        description: Enable SAML 1.1.
        type: boolean
      enableWsFed:
        description: Enable WS Federation.
        type: boolean
      enableWsTrust:
        description: Enable WS Trust.
        type: boolean
  CaptchaSettings:
    description: Settings for CAPTCHA.
    properties:
      encryptedSecretKey:
        description: >-
          The encrypted secret key for reCAPTCHA. If you do not want to update
          the stored value, this attribute should be passed back unchanged.
        type: string
      secretKey:
        description: >-
          Secret key for reCAPTCHA. GETs will not return this attribute. To
          update this field, specify the new value in this attribute.
        type: string
      siteKey:
        description: Site key for reCAPTCHA.
        type: string
  CertificateExpirationNotificationSettings:
    description: Notification settings for certificate expiration events.
    properties:
      emailAddress:
        description: Email address where notifications are sent.
        type: string
      finalWarningPeriod:
        description: >-
          Time before certificate expiration when final warning is sent (in
          days).
        format: int32
        type: integer
      initialWarningPeriod:
        description: >-
          Time before certificate expiration when initial warning is sent (in
          days).
        format: int32
        type: integer
      notificationPublisherRef:
        $ref: '#/definitions/ResourceLink'
        description: Reference to the associated notification publisher.
    required:
      - emailAddress
      - finalWarningPeriod
  ContactInfo:
    description: Contact information.
    properties:
      company:
        description: Company name.
        type: string
      email:
        description: Contact email address.
        type: string
      firstName:
        description: Contact first name.
        type: string
      lastName:
        description: Contact last name.
        type: string
      phone:
        description: Contact phone number.
        type: string
  EmailServerSettings:
    description: Email server configuration settings.
    properties:
      emailServer:
        description: The IP address or hostname of your email server.
        type: string
      encryptedPassword:
        description: >-
          For GET requests, this field contains the encrypted password, if one
          exists.  For POST and PUT requests, if you wish to reuse the existing
          password, this field should be passed back unchanged.
        type: string
      password:
        description: >-
          User password.  To update the password, specify the plaintext value in
          this field.  This field will not be populated for GET requests.
        type: string
      port:
        description: >-
          The SMTP port on your email server. Allowable values: 1 - 65535. The
          default value is 25.
        format: int32
        type: integer
      retryAttempts:
        description: >-
          The number of times PingFederate tries to resend an email upon
          unsuccessful delivery. The default value is 2.
        format: int32
        type: integer
      retryDelay:
        description: >-
          The number of minutes PingFederate waits before the next retry
          attempt. The default value is 2.
        format: int32
        type: integer
      sourceAddr:
        description: >-
          The email address that appears in the 'From' header line in email
          messages generated by PingFederate.  The address must be in valid
          format but need not be set up on your system.
        type: string
      sslPort:
        description: >-
          The secure SMTP port on your email server. This field is not active
          unless Use SSL is enabled. Allowable values: 1 - 65535. The default
          value is  465.
        format: int32
        type: integer
      timeout:
        description: >-
          The amount of time in seconds that PingFederate will wait before it
          times out connecting to the SMTP server. Allowable values: 0 - 3600.
          The default value is 30.
        format: int32
        type: integer
      useDebugging:
        description: >-
          Turns on detailed error messages for the PingFederate server log to
          help troubleshoot any problems.
        type: boolean
      useSSL:
        description: >-
          Requires the use of SSL/TLS on the port specified by 'sslPort'. If
          this option is enabled, it overrides the 'useTLS' option.
        type: boolean
      useTLS:
        description: >-
          Requires the use of the STARTTLS protocol on the port specified by
          'port'.
        type: boolean
      username:
        description: Authorized email username. Required if the password is provided.
        type: string
      verifyHostname:
        description: >-
          If useSSL or useTLS is enabled, this flag determines whether the email
          server hostname is verified against the server's SMTPS certificate.
        type: boolean
    required:
      - sourceAddr
      - emailServer
      - port
  FederationInfo:
    description: Federation Info.
    properties:
      autoConnectEntityId:
        description: This property has been deprecated and no longer used
        type: string
      baseUrl:
        description: >-
          The fully qualified host name, port, and path (if applicable) on which
          the PingFederate server runs.
        type: string
      saml1xIssuerId:
        description: >-
          This ID identifies your federation server for SAML 1.x transactions.
          As with SAML 2.0, it is usually defined as an organization's URL or a
          DNS address. The SourceID used for artifact resolution is derived from
          this ID using SHA1.
        type: string
      saml1xSourceId:
        description: >-
          If supplied, the Source ID value entered here is used for SAML 1.x,
          instead of being derived from the SAML 1.x Issuer/Audience.
        type: string
      saml2EntityId:
        description: >-
          This ID defines your organization as the entity operating the server
          for SAML 2.0 transactions. It is usually defined as an organization's
          URL or a DNS address; for example: pingidentity.com. The SAML SourceID
          used for artifact resolution is derived from this ID using SHA1.
        type: string
      wsfedRealm:
        description: >-
          The URI of the realm associated with the PingFederate server. A realm
          represents a single unit of security administration or trust.
        type: string
  IdpRole:
    allOf:
      - description: Identity Provider (IdP) role settings.
        properties:
          enable:
            description: Enable Identity Provider Role.
            type: boolean
          enableOutboundProvisioning:
            description: Enable Outbound Provisioning.
            type: boolean
          enableSaml10:
            description: Enable SAML 1.0.
            type: boolean
          enableSaml11:
            description: Enable SAML 1.1.
            type: boolean
          enableWsFed:
            description: Enable WS Federation.
            type: boolean
          enableWsTrust:
            description: Enable WS Trust.
            type: boolean
          saml20Profile:
            $ref: '#/definitions/SAML20Profile'
            description: SAML 2.0 Profile settings.
      - $ref: '#/definitions/BaseProviderRole'
  LicenseEventNotificationSettings:
    description: Notification settings for licensing events.
    properties:
      emailAddress:
        description: The email address where notifications are sent.
        type: string
      notificationPublisherRef:
        $ref: '#/definitions/ResourceLink'
        description: Reference to the associated notification publisher.
    required:
      - emailAddress
  MetadataEventNotificationSettings:
    description: Notification settings for metadata update events.
    properties:
      emailAddress:
        description: The email address where metadata update notifications are sent.
        type: string
      notificationPublisherRef:
        $ref: '#/definitions/ResourceLink'
        description: Reference to the associated notification publisher.
    required:
      - emailAddress
  NotificationSettings:
    description: >-
      Settings for notifications relating to licensing and certificate
      expiration.
    properties:
      accountChangesNotificationPublisherRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          Reference to the associated notification publisher for admin user
          account changes.
      certificateExpirations:
        $ref: '#/definitions/CertificateExpirationNotificationSettings'
        description: Settings for certificate expiration notifications.
      licenseEvents:
        $ref: '#/definitions/LicenseEventNotificationSettings'
        description: Settings for license event notifications.
      metadataNotificationSettings:
        $ref: '#/definitions/MetadataEventNotificationSettings'
        description: Settings for metadata update event notifications.
      notifyAdminUserPasswordChanges:
        description: >-
          Determines whether admin users are notified through email when their
          account is changed.
        type: boolean
  OAuthRole:
    description: OAuth role settings.
    properties:
      enableOauth:
        description: Enable OAuth 2.0 Authorization Server (AS) Role.
        type: boolean
      enableOpenIdConnect:
        description: Enable Open ID Connect.
        type: boolean
  OutboundProvisionDatabase:
    description: >-
      The settings for database used internally to facilitate outbound
      provisioning. The database stores state of synchronization between the
      source data store and the target data store.
    properties:
      dataStoreRef:
        $ref: '#/definitions/ResourceLink'
        description: Reference to the associated data store.
      synchronizationFrequency:
        description: The synchronization frequency in seconds. The default value is 60.
        format: int32
        type: integer
    required:
      - dataStoreRef
  ResourceLink:
    description: A reference to a resource.
    properties:
      id:
        description: The ID of the resource.
        type: string
      location:
        description: >-
          A read-only URL that references the resource. If the resource is not
          currently URL-accessible, this property will be null.
        type: string
    required:
      - id
  RolesAndProtocols:
    description: Roles and protocols settings.
    properties:
      enableIdpDiscovery:
        description: Enable IdP Discovery.
        type: boolean
      idpRole:
        $ref: '#/definitions/IdpRole'
        description: Identity Provider (IdP) settings.
      oauthRole:
        $ref: '#/definitions/OAuthRole'
        description: OAuth role settings.
      spRole:
        $ref: '#/definitions/SpRole'
        description: Service Provider (SP) settings.
  SAML20Profile:
    description: SAML 2.0 Profile.
    properties:
      enable:
        description: Enable SAML2.0 profile.
        type: boolean
      enableAutoConnect:
        description: This property has been deprecated and no longer used
        type: boolean
  ServerSettings:
    description: Server configuration settings.
    properties:
      captchaSettings:
        $ref: '#/definitions/CaptchaSettings'
        description: Captcha Settings.
      contactInfo:
        $ref: '#/definitions/ContactInfo'
        description: Information that identifies the server.
      emailServer:
        $ref: '#/definitions/EmailServerSettings'
        description: Email Server Settings.
      federationInfo:
        $ref: '#/definitions/FederationInfo'
        description: Federation Info.
      notifications:
        $ref: '#/definitions/NotificationSettings'
        description: Notification settings for license and certificate expiration events.
      rolesAndProtocols:
        $ref: '#/definitions/RolesAndProtocols'
        description: Configure roles and protocols.
  SpRole:
    allOf:
      - description: Service Provider (SP) role settings.
        properties:
          enable:
            description: Enable Service Provider Role.
            type: boolean
          enableInboundProvisioning:
            description: Enable Inbound Provisioning.
            type: boolean
          enableOpenIDConnect:
            description: Enable OpenID Connect.
            type: boolean
          enableSaml10:
            description: Enable SAML 1.0.
            type: boolean
          enableSaml11:
            description: Enable SAML 1.1.
            type: boolean
          enableWsFed:
            description: Enable WS Federation.
            type: boolean
          enableWsTrust:
            description: Enable WS Trust.
            type: boolean
          saml20Profile:
            $ref: '#/definitions/SpSAML20Profile'
            description: SAML 2.0 Profile settings.
      - $ref: '#/definitions/BaseProviderRole'
  SpSAML20Profile:
    allOf:
      - description: SP SAML 2.0 Profile.
        properties:
          enable:
            description: Enable SAML2.0 profile.
            type: boolean
          enableAutoConnect:
            description: This property has been deprecated and no longer used
            type: boolean
          enableXASP:
            description: >-
              Enable Attribute Requester Mapping for X.509 Attribute Sharing
              Profile (XASP)
            type: boolean
      - $ref: '#/definitions/SAML20Profile'
  SystemKey:
    description: A system key.
    properties:
      creationDate:
        description: Creation time of the key.
        format: date-time
        type: string
      encryptedKeyData:
        description: The system key encrypted.
        type: string
      keyData:
        description: >-
          The clear text system key base 64 encoded. The system key must be 32
          bytes before base 64 encoding.
        type: string
  SystemKeys:
    description: >-
      Secrets that are used in cryptographic operations to generate and consume
      internal tokens
    properties:
      current:
        $ref: '#/definitions/SystemKey'
        description: The current secret.
      pending:
        $ref: '#/definitions/SystemKey'
        description: The next secret.
      previous:
        $ref: '#/definitions/SystemKey'
        description: Previously used secret.
    required:
      - current
      - pending
  ValidationError:
    description: A data input validation error.
    properties:
      developerMessage:
        description: 'Developer-oriented error message, if available.'
        type: string
      errorId:
        description: Error identifier.
        type: string
      fieldPath:
        description: 'The path to the model field to which the error relates, if one exists.'
        type: string
      message:
        description: User-friendly error description.
        type: string
host: 'ip-10-101-29-72:9999'
info:
  title: 'ip-10-101-29-72:9999'
  version: v1
paths:
  /serverSettings:
    get:
      operationId: getServerSettings
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/ServerSettings'
      summary: Gets the server settings
    put:
      consumes:
        - application/json
      operationId: updateServerSettings
      parameters:
        - description: Configuration for server settings.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ServerSettings'
      produces:
        - application/json
      responses:
        '200':
          description: Server Settings updated.
          schema:
            $ref: '#/definitions/ServerSettings'
        '400':
          description: The request was improperly formatted or contained invalid fields.
        '404':
          description: Resource not found.
        '422':
          description: Validation error(s) occurred.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Update the server settings.
  /serverSettings/captchaSettings:
    get:
      operationId: getCaptchaSettings
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/CaptchaSettings'
      summary: Gets the CAPTCHA settings.
    put:
      consumes:
        - application/json
      operationId: updateCaptchaSettings
      parameters:
        - description: CAPTCHA settings.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/CaptchaSettings'
      produces:
        - application/json
      responses:
        '200':
          description: Captcha settings updated.
          schema:
            $ref: '#/definitions/CaptchaSettings'
        '400':
          description: The request was improperly formatted or contained invalid fields.
        '422':
          description: Validation error(s) occurred.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Update the CAPTCHA settings.
  /serverSettings/emailServer:
    get:
      deprecated: true
      operationId: getEmailServerSettings
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/EmailServerSettings'
        '404':
          description: Resource not found.
      summary: (Deprecated) Gets the email server settings
    put:
      consumes:
        - application/json
      deprecated: true
      description: >-
        (Deprecated) If the validationEmail is provided, an email will be sent
        to the validationEmail using the provided email server settings.  The
        settings will be saved if the test email is successfully sent.<br>
      operationId: updateEmailServerSettings
      parameters:
        - description: Configuration for email server settings.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/EmailServerSettings'
        - description: The email address used to validate the email server settings.
          in: query
          name: validationEmail
          required: false
          type: string
        - description: >-
            Only validation will be performed.  Email server settings will not
            be saved.
          in: query
          name: validateOnly
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: Email Server updated.
          schema:
            $ref: '#/definitions/EmailServerSettings'
        '400':
          description: The request was improperly formatted or contained invalid fields.
        '404':
          description: Resource not found.
        '422':
          description: Validation error(s) occurred.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: (Deprecated) Update the email server settings
  /serverSettings/notifications:
    get:
      operationId: getNotificationSettings
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/NotificationSettings'
      summary: Gets the notification settings
    put:
      consumes:
        - application/json
      operationId: updateNotificationSettings
      parameters:
        - description: Notification settings.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/NotificationSettings'
      produces:
        - application/json
      responses:
        '200':
          description: Notifications updated.
          schema:
            $ref: '#/definitions/NotificationSettings'
        '400':
          description: The request was improperly formatted or contained invalid fields.
        '422':
          description: Validation error(s) occurred.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Update the notification settings.
  /serverSettings/outboundProvisioning:
    get:
      description: >-
        Get the settings for database used internally to facilitate outbound
        provisioning to service providers.
      operationId: getOutBoundProvisioningSettings
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/OutboundProvisionDatabase'
      summary: Get database used for outbound provisioning
    put:
      description: >-
        Update the settings for database used internally to facilitate outbound
        provisioning to service providers.
      operationId: updateOutBoundProvisioningSettings
      parameters:
        - description: The Outbound Provision Database settings.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/OutboundProvisionDatabase'
      produces:
        - application/json
      responses:
        '200':
          description: Database updated for outbound provisioning.
          schema:
            $ref: '#/definitions/OutboundProvisionDatabase'
        '422':
          description: Validation error(s) occurred.
      summary: Update database used for outbound provisioning
  /serverSettings/systemKeys:
    get:
      description: 'For each key, only encryptedKeyData and not keyData will be returned'
      operationId: getSystemKeys
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/SystemKeys'
      summary: Get the system keys.
    put:
      description: 'For each key, either encryptedKeyData or keyData must be provided.'
      operationId: updateSystemKeys
      parameters:
        - description: System keys.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SystemKeys'
      produces:
        - application/json
      responses:
        '200':
          description: System keys updated.
          schema:
            $ref: '#/definitions/SystemKeys'
        '400':
          description: The request was improperly formatted or contained invalid fields.
        '422':
          description: Validation error(s) occurred.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Update the system keys.
  /serverSettings/systemKeys/rotate:
    post:
      description: >-
        Upon rotation, previous key will be replaced by the current key, the
        current key will be replaced by the pending key, while the newly
        generated key replaces the pending key. Periodic rotation can ensure
        optimal security of your environment.
      operationId: rotateSystemKeys
      produces:
        - application/json
      responses:
        '200':
          description: No response was specified
          schema:
            $ref: '#/definitions/SystemKeys'
        '201':
          description: System Keys rotated.
        '400':
          description: The request was improperly formatted or contained invalid fields.
        '422':
          description: Validation error(s) occurred.
      summary: Rotate the system keys.
schemes:
  - https
swagger: '2.0'

