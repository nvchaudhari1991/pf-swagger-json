basePath: /pf-admin-api/v1
definitions:
  Action:
    description: >-
      A read-only plugin action that either represents a file download or an
      arbitrary invocation performed by the plugin.
    properties:
      description:
        description: The description of this action.
        type: string
      download:
        description: >-
          Whether this action will trigger a download or invoke an internal
          action that will return a string result.
        type: boolean
      id:
        description: The ID of this action.
        type: string
      invocationRef:
        $ref: '#/definitions/ResourceLink'
        description: >-
          Whether this action will trigger a download or invoke an internal
          action that will return a string result.
      name:
        description: The name of this action.
        type: string
  ActionDescriptor:
    description: Describes an arbitrary action that is available for a plugin.
    properties:
      description:
        description: The description of this action
        type: string
      download:
        description: >-
          Whether this action will trigger a download or invoke an internal
          action that will return a string result.
        type: boolean
      downloadContentType:
        description: >-
          If this is a download, this is the Content-Type of the downloaded
          file. Otherwise, this is null.
        type: string
      downloadFileName:
        description: >-
          If this is a download, this is the suggested file name of the
          downloaded file. Otherwise, this is null.
        type: string
      name:
        description: The name of this action
        type: string
  ActionResult:
    description: The result for non-download plugin actions.
    properties:
      message:
        description: The message from the completed action.
        type: string
  Actions:
    description: A read-only list of available actions for this plugin instance.
    properties:
      items:
        description: The list of available actions.
        items:
          $ref: '#/definitions/Action'
        type: array
  ApiResult:
    description: Details on the result of the operation.
    properties:
      developerMessage:
        description: 'Developer-oriented error message, if available.'
        type: string
      message:
        description: Success or error message.
        type: string
      resultId:
        description: Result identifier.
        type: string
      validationErrors:
        description: 'List of validation errors, if any.'
        items:
          $ref: '#/definitions/ValidationError'
        type: array
  BaseSelectionFieldDescriptor:
    description: Holds fields that are shared by all selection-type field descriptors.
    properties:
      advanced:
        description: Whether this is an advanced field or not.
        type: boolean
      defaultValue:
        description: Default value of the field.
        type: string
      description:
        description: Description of the field.
        type: string
      label:
        description: Label of the field to be displayed in the administrative console.
        type: string
      name:
        description: Name of the field.
        type: string
      optionValues:
        description: The list of option values for this selection field.
        items:
          $ref: '#/definitions/OptionValue'
        type: array
      required:
        description: Whether a value is required for this field or not.
        type: boolean
      type:
        $ref: '#/definitions/FieldDescriptorType'
        description: The type of field descriptor.
        enum:
          - RADIO_GROUP
          - SELECT
          - FILTERABLE_SELECT
          - CHECK_BOX
          - TEXT_AREA
          - TEXT
          - UPLOAD_FILE
          - HASHED_TEXT
  CheckBoxFieldDescriptor:
    allOf:
      - description: >-
          A boolean field typically rendered as a checkbox in a configuration
          UI.
        properties:
          advanced:
            description: Whether this is an advanced field or not.
            type: boolean
          defaultValue:
            description: Default value of the field.
            type: string
          description:
            description: Description of the field.
            type: string
          label:
            description: Label of the field to be displayed in the administrative console.
            type: string
          name:
            description: Name of the field.
            type: string
          required:
            description: Whether a value is required for this field or not.
            type: boolean
          type:
            $ref: '#/definitions/FieldDescriptorType'
            description: The type of field descriptor.
            enum:
              - RADIO_GROUP
              - SELECT
              - FILTERABLE_SELECT
              - CHECK_BOX
              - TEXT_AREA
              - TEXT
              - UPLOAD_FILE
              - HASHED_TEXT
      - $ref: '#/definitions/FieldDescriptor'
  ConfigField:
    description: A plugin configuration field value.
    properties:
      encryptedValue:
        description: >-
          For encrypted or hashed fields, this attribute contains the encrypted
          representation of the field's value, if a value is defined. If you do
          not want to update the stored value, this attribute should be passed
          back unchanged.
        type: string
      inherited:
        description: >-
          Whether this field is inherited from its parent instance. If true, the
          value/encrypted value properties become read-only. The default value
          is false.
        type: boolean
      name:
        description: The name of the configuration field.
        type: string
      value:
        description: >-
          The value for the configuration field. For encrypted or hashed fields,
          GETs will not return this attribute. To update an encrypted or hashed
          field, specify the new value in this attribute.
        type: string
    required:
      - name
  ConfigRow:
    description: A row of configuration values for a plugin configuration table.
    properties:
      defaultRow:
        description: Whether this row is the default.
        type: boolean
      fields:
        description: The configuration fields in the row.
        items:
          $ref: '#/definitions/ConfigField'
        type: array
    required:
      - fields
  ConfigTable:
    description: A plugin configuration table populated with values.
    properties:
      inherited:
        description: >-
          Whether this table is inherited from its parent instance. If true, the
          rows become read-only. The default value is false.
        type: boolean
      name:
        description: The name of the table.
        type: string
      rows:
        description: List of table rows.
        items:
          $ref: '#/definitions/ConfigRow'
        type: array
    required:
      - name
  CustomDataStore:
    allOf:
      - description: A custom data store.
        properties:
          configuration:
            $ref: '#/definitions/PluginConfiguration'
            description: Plugin instance configuration.
          id:
            description: >-
              The persistent, unique ID for the data store. It can be any
              combination of [a-zA-Z0-9._-]. This property is system-assigned if
              not specified.
            type: string
          maskAttributeValues:
            description: Whether attribute values should be masked in the log.
            type: boolean
          name:
            description: The plugin instance name.
            type: string
          parentRef:
            $ref: '#/definitions/ResourceLink'
            description: >-
              The reference to this plugin's parent instance. The parent
              reference is only accepted if the plugin type supports parent
              instances.<br>Note: This parent reference is required if this
              plugin instance is used as an overriding plugin (e.g. connection
              adapter overrides)
          pluginDescriptorRef:
            $ref: '#/definitions/ResourceLink'
            description: >-
              Reference to the plugin descriptor for this instance. The plugin
              descriptor cannot be modified once the instance is
              created.<br>Note: Ignored when specifying a connection's adapter
              override.
          type:
            $ref: '#/definitions/DataStoreType'
            description: The data store type.
            enum:
              - LDAP
              - JDBC
              - CUSTOM
        required:
          - type
          - name
          - pluginDescriptorRef
          - configuration
      - $ref: '#/definitions/DataStore'
  CustomDataStoreDescriptor:
    description: A custom data store descriptor.
    properties:
      attributeContract:
        description: The attribute contract for this plugin.
        items:
          type: string
        type: array
      className:
        description: Full class name of the class that implements this plugin.
        type: string
      configDescriptor:
        $ref: '#/definitions/PluginConfigDescriptor'
        description: >-
          The descriptor which defines the configuration fields available for
          this plugin.
      id:
        description: Unique ID of the plugin.
        type: string
      name:
        description: Friendly name for the plugin.
        type: string
      supportsExtendedContract:
        description: >-
          Determines whether this plugin supports extending the attribute
          contract.
        type: boolean
  CustomDataStoreDescriptors:
    description: A collection of custom data store descriptors.
    properties:
      items:
        description: The list of custom data store descriptors.
        items:
          $ref: '#/definitions/CustomDataStoreDescriptor'
        type: array
  DataSourceTag:
    properties:
      defaultSource:
        type: boolean
      tags:
        type: string
      tagsHashSet:
        items:
          type: string
        type: array
        uniqueItems: true
  DataStore:
    description: The set of attributes used to configure a data store.
    discriminator: type
    properties:
      id:
        description: >-
          The persistent, unique ID for the data store. It can be any
          combination of [a-zA-Z0-9._-]. This property is system-assigned if not
          specified.
        type: string
      maskAttributeValues:
        description: Whether attribute values should be masked in the log.
        type: boolean
      type:
        $ref: '#/definitions/DataStoreType'
        description: The data store type.
        enum:
          - LDAP
          - JDBC
          - CUSTOM
    required:
      - type
  DataStores:
    description: A collection of data stores.
    properties:
      items:
        description: The actual list of data stores.
        items:
          $ref: '#/definitions/DataStore'
        type: array
  FieldDescriptor:
    description: Describes a plugin configuration field.
    discriminator: type
    properties:
      advanced:
        description: Whether this is an advanced field or not.
        type: boolean
      defaultValue:
        description: Default value of the field.
        type: string
      description:
        description: Description of the field.
        type: string
      label:
        description: Label of the field to be displayed in the administrative console.
        type: string
      name:
        description: Name of the field.
        type: string
      required:
        description: Whether a value is required for this field or not.
        type: boolean
      type:
        $ref: '#/definitions/FieldDescriptorType'
        description: The type of field descriptor.
        enum:
          - RADIO_GROUP
          - SELECT
          - FILTERABLE_SELECT
          - CHECK_BOX
          - TEXT_AREA
          - TEXT
          - UPLOAD_FILE
          - HASHED_TEXT
  HashedTextFieldDescriptor:
    allOf:
      - description: A text field that will contain a secure salted hash.
        properties:
          advanced:
            description: Whether this is an advanced field or not.
            type: boolean
          defaultValue:
            description: Default value of the field.
            type: string
          description:
            description: Description of the field.
            type: string
          label:
            description: Label of the field to be displayed in the administrative console.
            type: string
          name:
            description: Name of the field.
            type: string
          required:
            description: Whether a value is required for this field or not.
            type: boolean
          size:
            description: The size of the text field.
            format: int32
            type: integer
          type:
            $ref: '#/definitions/FieldDescriptorType'
            description: The type of field descriptor.
            enum:
              - RADIO_GROUP
              - SELECT
              - FILTERABLE_SELECT
              - CHECK_BOX
              - TEXT_AREA
              - TEXT
              - UPLOAD_FILE
              - HASHED_TEXT
      - $ref: '#/definitions/FieldDescriptor'
  JdbcDataStore:
    allOf:
      - description: A JDBC data store.
        properties:
          allowMultiValueAttributes:
            description: >-
              Indicates that this data store can select more than one record
              from a column and return the results as a multi-value attribute.
            type: boolean
          blockingTimeout:
            description: >-
              The amount of time in milliseconds a request waits to get a
              connection from the connection pool before it fails. Omitting this
              attribute will set the value to the connection pool default.
            format: int32
            type: integer
          connectionUrl:
            description: >-
              The default location of the JDBC database. This field is required
              if no mapping for JDBC database location and tags are specified.
            type: string
          connectionUrlTags:
            description: >-
              The set of connection URLs and associated tags for this JDBC data
              store.
            items:
              $ref: '#/definitions/JdbcTagConfig'
            type: array
          driverClass:
            description: >-
              The name of the driver class used to communicate with the source
              database.
            type: string
          encryptedPassword:
            description: >-
              The encrypted password needed to access the database. If you do
              not want to update the stored value, this attribute should be
              passed back unchanged.
            type: string
          id:
            description: >-
              The persistent, unique ID for the data store. It can be any
              combination of [a-zA-Z0-9._-]. This property is system-assigned if
              not specified.
            type: string
          idleTimeout:
            description: >-
              The length of time in minutes the connection can be idle in the
              pool before it is closed. Omitting this attribute will set the
              value to the connection pool default.
            format: int32
            type: integer
          maskAttributeValues:
            description: Whether attribute values should be masked in the log.
            type: boolean
          maxPoolSize:
            description: >-
              The largest number of database connections in the connection pool
              for the given data store. Omitting this attribute will set the
              value to the connection pool default.
            format: int32
            type: integer
          minPoolSize:
            description: >-
              The smallest number of database connections in the connection pool
              for the given data store. Omitting this attribute will set the
              value to the connection pool default.
            format: int32
            type: integer
          name:
            description: >-
              The data store name with a unique value across all data sources.
              Omitting this attribute will set the value to a combination of the
              connection url and the username.
            type: string
          password:
            description: >-
              The password needed to access the database. GETs will not return
              this attribute. To update this field, specify the new value in
              this attribute.
            type: string
          type:
            $ref: '#/definitions/DataStoreType'
            description: The data store type.
            enum:
              - LDAP
              - JDBC
              - CUSTOM
          userName:
            description: The name that identifies the user when connecting to the database.
            type: string
          validateConnectionSql:
            description: >-
              A simple SQL statement used by PingFederate at runtime to verify
              that the database connection is still active and to reconnect if
              needed.
            type: string
        required:
          - type
          - driverClass
          - userName
      - $ref: '#/definitions/DataStore'
  JdbcTagConfig:
    description: >-
      A JDBC data store's connection URLs and tags configuration. This is
      required if no default JDBC database location is specified.
    properties:
      connectionUrl:
        description: The location of the JDBC database.
        type: string
      defaultSource:
        description: >-
          Whether this is the default connection. Defaults to false if not
          specified.
        type: boolean
      tags:
        description: Tags associated with this data source.
        type: string
    required:
      - connectionUrl
  LdapDataStore:
    allOf:
      - description: A LDAP data store.
        properties:
          binaryAttributes:
            description: The list of LDAP attributes to be handled as binary data.
            items:
              type: string
            type: array
          bindAnonymously:
            description: >-
              Whether username and password are required. The default value is
              false.
            type: boolean
          connectionTimeout:
            description: >-
              The maximum number of milliseconds that a connection attempt
              should be allowed to continue before returning an error. A value
              of -1 causes the pool to wait indefinitely. Omitting this
              attribute will set the value to the default value.
            format: int32
            type: integer
          createIfNecessary:
            description: >-
              Indicates whether temporary connections can be created when the
              Maximum Connections threshold is reached.
            type: boolean
          dnsTtl:
            description: >-
              The maximum time in milliseconds that DNS information are cached.
              Omitting this attribute will set the value to the default value.
            format: int32
            type: integer
          encryptedPassword:
            description: >-
              The encrypted password credential required to access the data
              store.  If you do not want to update the stored value, this
              attribute should be passed back unchanged.
            type: string
          followLDAPReferrals:
            description: >-
              Follow LDAP Referrals in the domain tree. The default value is
              false. This property does not apply to PingDirectory as this
              functionality is configured in PingDirectory.
            type: boolean
          hostnames:
            description: >-
              The default LDAP host names. This field is required if no mapping
              for host names and tags are specified.
            items:
              type: string
            type: array
          hostnamesTags:
            description: >-
              The set of host names and associated tags for this LDAP data
              store.
            items:
              $ref: '#/definitions/LdapTagConfig'
            type: array
          id:
            description: >-
              The persistent, unique ID for the data store. It can be any
              combination of [a-zA-Z0-9._-]. This property is system-assigned if
              not specified.
            type: string
          ldapDnsSrvPrefix:
            description: >-
              The prefix value used to discover LDAP DNS SRV record. Omitting
              this attribute will set the value to the default value.
            type: string
          ldapType:
            $ref: '#/definitions/LdapType'
            description: >-
              A type that allows PingFederate to configure many provisioning
              settings automatically. The 'UNBOUNDID_DS' type has been
              deprecated, please use the 'PING_DIRECTORY' type instead.
            enum:
              - ACTIVE_DIRECTORY
              - ORACLE_DIRECTORY_SERVER
              - ORACLE_UNIFIED_DIRECTORY
              - UNBOUNDID_DS
              - PING_DIRECTORY
              - GENERIC
          ldapsDnsSrvPrefix:
            description: >-
              The prefix value used to discover LDAPs DNS SRV record. Omitting
              this attribute will set the value to the default value.
            type: string
          maskAttributeValues:
            description: Whether attribute values should be masked in the log.
            type: boolean
          maxConnections:
            description: >-
              The largest number of active connections that can remain in each
              pool without releasing extra ones. Omitting this attribute will
              set the value to the default value.
            format: int32
            type: integer
          maxWait:
            description: >-
              The maximum number of milliseconds the pool waits for a connection
              to become available when trying to obtain a connection from the
              pool. Omitting this attribute or setting a value of -1 causes the
              pool not to wait at all and to either create a new connection or
              produce an error (when no connections are available).
            format: int32
            type: integer
          minConnections:
            description: >-
              The smallest number of connections that can remain in each pool,
              without creating extra ones. Omitting this attribute will set the
              value to the default value.
            format: int32
            type: integer
          name:
            description: >-
              The data store name with a unique value across all data sources.
              Omitting this attribute will set the value to a combination of the
              hostname(s) and the principal.
            type: string
          password:
            description: >-
              The password credential required to access the data store. GETs
              will not return this attribute. To update this field, specify the
              new value in this attribute.
            type: string
          readTimeout:
            description: >-
              The maximum number of milliseconds a connection waits for a
              response to be returned before producing an error. A value of -1
              causes the connection to wait indefinitely. Omitting this
              attribute will set the value to the default value.
            format: int32
            type: integer
          testOnBorrow:
            description: >-
              Indicates whether objects are validated before being borrowed from
              the pool.
            type: boolean
          testOnReturn:
            description: >-
              Indicates whether objects are validated before being returned to
              the pool.
            type: boolean
          timeBetweenEvictions:
            description: >-
              The frequency, in milliseconds, that the evictor cleans up the
              connections in the pool. A value of -1 disables the evictor.
              Omitting this attribute will set the value to the default value.
            format: int32
            type: integer
          type:
            $ref: '#/definitions/DataStoreType'
            description: The data store type.
            enum:
              - LDAP
              - JDBC
              - CUSTOM
          useDnsSrvRecords:
            description: >-
              Use DNS SRV Records to discover LDAP server information. The
              default value is false.
            type: boolean
          useSsl:
            description: >-
              Connects to the LDAP data store using secure SSL/TLS encryption
              (LDAPS). The default value is false.
            type: boolean
          userDN:
            description: The username credential required to access the data store.
            type: string
          verifyHost:
            description: >-
              Verifies that the presented server certificate includes the
              address to which the client intended to establish a connection.
              Omitting this attribute will set the value to true.
            type: boolean
        required:
          - type
          - ldapType
      - $ref: '#/definitions/DataStore'
  LdapTagConfig:
    description: >-
      An LDAP data store's hostnames and tags configuration. This is required if
      no default hostname is specified.
    properties:
      defaultSource:
        description: >-
          Whether this is the default connection. Defaults to false if not
          specified.
        type: boolean
      hostnames:
        description: The LDAP host names.
        items:
          type: string
        type: array
      tags:
        description: Tags associated with this data source.
        type: string
    required:
      - hostnames
  OptionValue:
    description: An option name and value associated with a selection field.
    properties:
      name:
        description: The name of the option.
        type: string
      value:
        description: The value associated with this option.
        type: string
  PluginConfigDescriptor:
    description: Defines the configuration fields available for a plugin.
    properties:
      actionDescriptors:
        description: The available actions for this plugin.
        items:
          $ref: '#/definitions/ActionDescriptor'
        type: array
      description:
        description: The description of this plugin.
        type: string
      fields:
        description: The configuration fields available for this plugin.
        items:
          $ref: '#/definitions/FieldDescriptor'
        type: array
      tables:
        description: Configuration tables available for this plugin.
        items:
          $ref: '#/definitions/TableDescriptor'
        type: array
  PluginConfiguration:
    description: Configuration settings for a plugin instance.
    properties:
      fields:
        description: List of configuration fields.
        items:
          $ref: '#/definitions/ConfigField'
        type: array
      tables:
        description: List of configuration tables.
        items:
          $ref: '#/definitions/ConfigTable'
        type: array
  PluginDescriptor:
    description: 'Defines a plugin type, including available configuration parameters.'
    properties:
      attributeContract:
        description: The attribute contract for this plugin.
        items:
          type: string
        type: array
      className:
        description: Full class name of the class that implements this plugin.
        type: string
      configDescriptor:
        $ref: '#/definitions/PluginConfigDescriptor'
        description: >-
          The descriptor which defines the configuration fields available for
          this plugin.
      id:
        description: Unique ID of the plugin.
        type: string
      name:
        description: Friendly name for the plugin.
        type: string
      supportsExtendedContract:
        description: >-
          Determines whether this plugin supports extending the attribute
          contract.
        type: boolean
  RadioGroupFieldDescriptor:
    allOf:
      - description: >-
          A selection-type field intended to be rendered as a group of radio
          buttons in a UI.
        properties:
          advanced:
            description: Whether this is an advanced field or not.
            type: boolean
          defaultValue:
            description: Default value of the field.
            type: string
          description:
            description: Description of the field.
            type: string
          label:
            description: Label of the field to be displayed in the administrative console.
            type: string
          name:
            description: Name of the field.
            type: string
          optionValues:
            description: The list of option values for this selection field.
            items:
              $ref: '#/definitions/OptionValue'
            type: array
          required:
            description: Whether a value is required for this field or not.
            type: boolean
          type:
            $ref: '#/definitions/FieldDescriptorType'
            description: The type of field descriptor.
            enum:
              - RADIO_GROUP
              - SELECT
              - FILTERABLE_SELECT
              - CHECK_BOX
              - TEXT_AREA
              - TEXT
              - UPLOAD_FILE
              - HASHED_TEXT
      - $ref: '#/definitions/BaseSelectionFieldDescriptor'
      - $ref: '#/definitions/FieldDescriptor'
  ResourceLink:
    description: A reference to a resource.
    properties:
      id:
        description: The ID of the resource.
        type: string
      location:
        description: >-
          A read-only URL that references the resource. If the resource is not
          currently URL-accessible, this property will be null.
        type: string
    required:
      - id
  SelectFieldDescriptor:
    allOf:
      - description: >-
          A selection field that is intended to be rendered as a dropdown list
          of options.
        properties:
          advanced:
            description: Whether this is an advanced field or not.
            type: boolean
          defaultValue:
            description: Default value of the field.
            type: string
          description:
            description: Description of the field.
            type: string
          label:
            description: Label of the field to be displayed in the administrative console.
            type: string
          name:
            description: Name of the field.
            type: string
          optionValues:
            description: The list of option values for this selection field.
            items:
              $ref: '#/definitions/OptionValue'
            type: array
          required:
            description: Whether a value is required for this field or not.
            type: boolean
          type:
            $ref: '#/definitions/FieldDescriptorType'
            description: The type of field descriptor.
            enum:
              - RADIO_GROUP
              - SELECT
              - FILTERABLE_SELECT
              - CHECK_BOX
              - TEXT_AREA
              - TEXT
              - UPLOAD_FILE
              - HASHED_TEXT
      - $ref: '#/definitions/BaseSelectionFieldDescriptor'
      - $ref: '#/definitions/FieldDescriptor'
  TableDescriptor:
    description: Defines a plugin configuration table.
    properties:
      columns:
        description: Get the columns in the table.
        items:
          $ref: '#/definitions/FieldDescriptor'
        type: array
      description:
        description: Description for the table.
        type: string
      label:
        description: Label for the table to be displayed in the administrative console.
        type: string
      name:
        description: The name of the table.
        type: string
      requireDefaultRow:
        description: Configure whether this table requires default row to be set.
        type: boolean
  TextAreaFieldDescriptor:
    allOf:
      - description: A field intended to be rendered as a text box in a UI.
        properties:
          advanced:
            description: Whether this is an advanced field or not.
            type: boolean
          columns:
            description: The number of columns for the text box.
            format: int32
            type: integer
          defaultValue:
            description: Default value of the field.
            type: string
          description:
            description: Description of the field.
            type: string
          label:
            description: Label of the field to be displayed in the administrative console.
            type: string
          name:
            description: Name of the field.
            type: string
          required:
            description: Whether a value is required for this field or not.
            type: boolean
          rows:
            description: The number of rows for the text box.
            format: int32
            type: integer
          type:
            $ref: '#/definitions/FieldDescriptorType'
            description: The type of field descriptor.
            enum:
              - RADIO_GROUP
              - SELECT
              - FILTERABLE_SELECT
              - CHECK_BOX
              - TEXT_AREA
              - TEXT
              - UPLOAD_FILE
              - HASHED_TEXT
      - $ref: '#/definitions/FieldDescriptor'
  TextFieldDescriptor:
    allOf:
      - description: A text field.
        properties:
          advanced:
            description: Whether this is an advanced field or not.
            type: boolean
          defaultValue:
            description: Default value of the field.
            type: string
          description:
            description: Description of the field.
            type: string
          encrypted:
            description: >-
              Determines whether the field value should be masked in the UI and
              encrypted on disk.
            type: boolean
          label:
            description: Label of the field to be displayed in the administrative console.
            type: string
          name:
            description: Name of the field.
            type: string
          required:
            description: Whether a value is required for this field or not.
            type: boolean
          size:
            description: The size of the text field.
            format: int32
            type: integer
          type:
            $ref: '#/definitions/FieldDescriptorType'
            description: The type of field descriptor.
            enum:
              - RADIO_GROUP
              - SELECT
              - FILTERABLE_SELECT
              - CHECK_BOX
              - TEXT_AREA
              - TEXT
              - UPLOAD_FILE
              - HASHED_TEXT
      - $ref: '#/definitions/FieldDescriptor'
  UploadFileFieldDescriptor:
    allOf:
      - description: A field which allows the user to upload a file.
        properties:
          advanced:
            description: Whether this is an advanced field or not.
            type: boolean
          defaultValue:
            description: Default value of the field.
            type: string
          description:
            description: Description of the field.
            type: string
          label:
            description: Label of the field to be displayed in the administrative console.
            type: string
          name:
            description: Name of the field.
            type: string
          required:
            description: Whether a value is required for this field or not.
            type: boolean
          type:
            $ref: '#/definitions/FieldDescriptorType'
            description: The type of field descriptor.
            enum:
              - RADIO_GROUP
              - SELECT
              - FILTERABLE_SELECT
              - CHECK_BOX
              - TEXT_AREA
              - TEXT
              - UPLOAD_FILE
              - HASHED_TEXT
      - $ref: '#/definitions/FieldDescriptor'
  ValidationError:
    description: A data input validation error.
    properties:
      developerMessage:
        description: 'Developer-oriented error message, if available.'
        type: string
      errorId:
        description: Error identifier.
        type: string
      fieldPath:
        description: 'The path to the model field to which the error relates, if one exists.'
        type: string
      message:
        description: User-friendly error description.
        type: string
host: 'ip-10-101-29-72:9999'
info:
  title: 'ip-10-101-29-72:9999'
  version: v1
paths:
  /dataStores:
    get:
      description: Get a list of all the data stores.
      operationId: getDataStores
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/DataStores'
      summary: Get list of data stores.
    post:
      consumes:
        - application/json
      description: >-
        Create a new data store. If the data store is not properly configured, a
        422 status code is returned along with a list of validation errors that
        must be corrected.
      operationId: createDataStore
      parameters:
        - description: Configuration for new data store.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DataStore'
        - default: false
          description: Connection test will be bypassed when set to true. Default to false.
          in: header
          name: X-BypassExternalValidation
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: No response was specified
          schema:
            $ref: '#/definitions/DataStore'
        '201':
          description: Data store created.
        '400':
          description: The request was improperly formatted or contained invalid fields.
        '422':
          description: Validation error(s) occurred.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Create a new data store.
  /dataStores/descriptors:
    get:
      operationId: getCustomDataStoreDescriptors
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/CustomDataStoreDescriptors'
      summary: Get the list of available custom data store descriptors.
  '/dataStores/descriptors/{id}':
    get:
      description: >-
        Get the description of a custom data store plugin by ID. A 404 status
        code is returned for nonexistent IDs.
      operationId: getCustomDataStoreDescriptor
      parameters:
        - description: ID of custom data store descriptor to fetch.
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/CustomDataStoreDescriptor'
        '404':
          description: Resource not found.
      summary: Get the description of a custom data store plugin by ID.
  '/dataStores/{id}':
    delete:
      description: >-
        Delete a data store with the specified ID. A 404 status code is returned
        for nonexistent IDs. Note: Only unused data stores can be deleted. If
        the request succeeds, the response body is empty. If the request fails,
        an ApiResult is returned with details of the error.
      operationId: deleteDataStore
      parameters:
        - description: ID of data store to delete.
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: No response was specified
          schema:
            $ref: '#/definitions/ApiResult'
        '204':
          description: Data store deleted.
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/ApiResult'
        '422':
          description: Resource is in use and cannot be deleted.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Delete a data store.
    get:
      description: >-
        Get a data store with the specified ID. A 404 status code is returned
        for nonexistent IDs.
      operationId: getDataStore
      parameters:
        - description: ID of data store to fetch.
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/DataStore'
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Find data store by ID.
    put:
      consumes:
        - application/json
      description: >-
        Update a data store with the matching ID. If the data store is not
        properly configured, a 422 status code is returned along with a list of
        validation errors that must be corrected. Note: A 404 status code is
        returned for nonexistent IDs.
      operationId: updateDataStore
      parameters:
        - description: ID of data store to update.
          in: path
          name: id
          required: true
          type: string
        - description: Configuration for updated data store.
          in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DataStore'
        - default: false
          description: Connection test will be bypassed when set to true. Default to false.
          in: header
          name: X-BypassExternalValidation
          required: false
          type: boolean
      produces:
        - application/json
      responses:
        '200':
          description: Data store updated.
          schema:
            $ref: '#/definitions/DataStore'
        '400':
          description: The request was improperly formatted or contained invalid fields.
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/ApiResult'
        '422':
          description: Validation error(s) occurred.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Update a data store.
  '/dataStores/{id}/actions':
    get:
      operationId: getActions
      parameters:
        - description: ID of data store to which these actions belong to.
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/Actions'
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: List the actions for a data store instance.
  '/dataStores/{id}/actions/{actionId}':
    get:
      description: >-
        Find a data store instance's action by ID. A 404 status code is returned
        for nonexistent action IDs.
      operationId: getAction
      parameters:
        - description: ID of data store to which these actions belong to.
          in: path
          name: id
          required: true
          type: string
        - description: ID of the action to get.
          in: path
          name: actionId
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Success.
          schema:
            $ref: '#/definitions/Action'
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/ApiResult'
      summary: Find a data store instance's action by ID.
  '/dataStores/{id}/actions/{actionId}/invokeAction':
    post:
      description: >-
        Invokes an action for a data source instance. A 404 status code is
        returned for nonexistent action IDs. If the action produces a download
        file, the file will be returned directly in the response. Otherwise an
        ActionResult will be returned.
      operationId: invokeAction
      parameters:
        - description: ID of data store to which these actions belong to.
          in: path
          name: id
          required: true
          type: string
        - description: ID of the action to invoke.
          in: path
          name: actionId
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Action invoked on Data store.
          schema:
            $ref: '#/definitions/ActionResult'
        '404':
          description: Resource not found.
      summary: Invokes an action for a data source instance.
schemes:
  - https
swagger: '2.0'

